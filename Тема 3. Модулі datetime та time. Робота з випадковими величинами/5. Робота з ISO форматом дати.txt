Робота з ISO форматом дати

ISO формат дати відноситься до міжнародного стандарту представлення дат і часу, відомого 
як ISO 8601. Цей стандарт створений Міжнародною організацією стандартизації (ISO) та 
використовується для уніфікації представлення дати та часу у всьому світі.

Формат дати в ISO 8601 виглядає як "YYYY-MM-DD", де:

- YYYY - це рік (наприклад, 2023),
- MM - місяць (наприклад, 01 для січня),
- DD - день (наприклад, 31).

Формат часу в ISO 8601 виглядає як "HH:MM:SS", де:

- HH - години (від 00 до 23),
- MM - хвилини (від 00 до 59),
- SS - секунди (від 00 до 59, іноді з додатковими десятковими частинами для мікросекунд).

Повне представлення дати та часу в ISO 8601 поєднує ці два формати з "T" між ними, 
наприклад "YYYY-MM-DDTHH:MM:SS". Це відділяє дату від часу і формат легко відрізняється 
від інших представлень.

ISO 8601 також підтримує представлення часових зон. Наприклад, "Z" на кінці означає UTC 
(координований всесвітній час), а відхилення від UTC може бути представлене як "+HH:MM" 
або "-HH:MM". Термін UTC, що розшифровується як Всесвітній координований час (англ. 
Coordinated Universal Time), є основною системою часу, від якої регулюються всі часові 
зони у світі. Він використовується як світовий стандарт часу. Він не змінюється з порами 
року та не підлягає переходу на літній/зимовий час, на відміну від багатьох місцевих часових зон.

Через свою універсальність, UTC широко використовується в міжнародних комунікаціях, авіації, 
астрономії та інших галузях. Локальні часові зони часто визначаються як UTC плюс або мінус 
певна кількість годин.

Модуль datetime надає зручні інструменти для роботи з датами та часом у форматі ISO 8601. 
Об'єкт datetime можна легко перетворити в рядок формату ISO 8601 за допомогою методу isoformat():

✂️ Цей код можна запустити!

from datetime import datetime

# Поточна дата та час
now = datetime.now()

# Конвертація у формат ISO 8601
iso_format = now.isoformat()
print(iso_format)

Виведе, наприклад:

2023-12-14T15:43:42.651309

Для зворотного перетворення рядка у форматі ISO 8601 на об'єкт datetime, можна використати
 метод fromisoformat():

✂️ Цей код можна запустити!

from datetime import datetime

iso_date_string = "2023-03-14T12:39:29.992996"

# Конвертація з ISO формату
date_from_iso = datetime.fromisoformat(iso_date_string)
print(date_from_iso)

Виведе об'єкт datetime, що відповідає вказаній даті та часу

2023-03-14 12:39:29.992996

Метод isoweekday() у об'єкті datetime використовується для отримання дня тижня відповідно 
до ISO 8601. Згідно з цим стандартом, тиждень починається з понеділка, який має значення 1, 
і закінчується неділею, яка має значення 7.

✂️ Цей код можна запустити!

from datetime import datetime

# Створення об'єкта datetime
now = datetime.now()

# Використання isoweekday() для отримання дня тижня
day_of_week = now.isoweekday()

print(f"Сьогодні: {day_of_week}")  # Поверне число від 1 до 7, що відповідає дню тижня

У цьому прикладі day_of_week буде містити число від 1 до 7, де 1 відповідає понеділку, а 
7 - неділі. Для четверга виведення буде:

Сьогодні: 4

Метод isoweekday() корисний у сценаріях, де потрібно визначити конкретний день тижня, 
наприклад, при плануванні подій або виконанні дій, залежних від дня тижня. Це може бути 
особливо корисним у бізнес-логіці, яка оперує робочими та вихідними днями.

Також розглянемо корисний метод isocalendar(), який використовується для отримання кортежу, 
що містить ISO рік, номер тижня в році та номер дня тижня відповідно до ISO 8601.

Вивід isocalendar() - це кортеж (ISO_рік, ISO_тиждень, ISO_день_тижня), де:

- ISO_рік - це рік у форматі ISO.
- ISO_тиждень - номер тижня в році за ISO 8601 (від 1 до 53).
- ISO_день_тижня - день тижня за ISO 8601, де 1 означає понеділок, а 7 - неділю.

✂️ Цей код можна запустити!

from datetime import datetime

# Створення об'єкта datetime
now = datetime.now()

# Отримання ISO календаря
iso_calendar = now.isocalendar()

print(f"ISO рік: {iso_calendar[0]}, ISO тиждень: {iso_calendar[1]}, ISO день тижня: {iso_calendar[2]}")

У цьому прикладі iso_calendar буде містити три значення: ISO рік, номер тижня та номер дня 
тижня, у форматі datetime.IsoCalendarDate(year=2023, week=50, weekday=4). Виведення до 14.12.2023 буде:

ISO рік: 2023, ISO тиждень: 50, ISO день тижня: 4

Метод isocalendar() корисний у ситуаціях, коли потрібно працювати з тижневими інтервалами 
або розраховувати дати у форматі, який широко використовується в бізнес-плануванні та логістиці. 
Він також може бути корисним для визначення конкретного тижня року для подій або при плануванні завдань.

Ключові аспекти: методи для роботи з ISO форматом дати

Отже, коротко підсумуємо використання методів, які ми щойно розглянули:

- Метод isoformat() використовується для конвертації об'єкта datetime в рядок у форматі ISO 8601.
- Метод fromisoformat() використовується для конвертації рядка у форматі ISO 8601 в об'єкт datetime.
- Метод isoweekday() використовується для отримання дня тижня відповідно до ISO 8601.
- Метод isocalendar() використовується для отримання кортежу, що містить ISO рік, номер тижня в році 
та номер дня тижня відповідно до ISO 8601.

Робота з часовими зонами

Щоб вивести дату у форматі UTC це можна зробити, додавши інформацію про часову зону до об'єкта datetime:

✂️ Цей код можна запустити!

from datetime import datetime, timezone

local_now = datetime.now()
utc_now = datetime.now(timezone.utc)

print(local_now)
print(utc_now)  # Виведе поточний час в UTC

Виведення:

2023-12-14 16:39:33.883454
2023-12-14 14:39:33.883454+00:00

Щоб перетворити час з UTC в іншу часову зону, вам знадобиться визначити об'єкт timezone з 
відповідним зсувом. Наприклад, для перетворення UTC часу в час, що відповідає Східному 
часовому поясу США (UTC-5 годин), можна зробити наступне:

✂️ Цей код можна запустити!

from datetime import datetime, timezone, timedelta

utc_time = datetime.now(timezone.utc)

# Створення часової зони для Східного часового поясу (UTC-5)
eastern_time = utc_time.astimezone(timezone(timedelta(hours=-5)))
# Перетворює час UTC в час Східного часового поясу
print(eastern_time)  

Виведення:

2023-12-14 09:43:06.778253-05:00

Щоб перетворити локальний час у час UTC, спочатку потрібно призначити

локальному часу відповідну часову зону, а потім використати метод astimezone() 
для конвертації його в UTC:

✂️ Цей код можна запустити!

from datetime import datetime, timezone, timedelta

# Припустимо, місцевий час належить до часової зони UTC+2
local_timezone = timezone(timedelta(hours=2))
local_time = datetime(year=2023, month=3, day=14, hour=12, minute=30, second=0, tzinfo=local_timezone)

# Конвертація локального часу в UTC
utc_time = local_time.astimezone(timezone.utc)
print(utc_time)  # Виведе час в UTC

У цьому прикладі, ми створили об'єкт datetime з часовою зоною UTC+2 (Київ) та перетворили 
його в час UTC. Виведення:

2023-03-14 10:30:00+00:00

Стандарт ISO 8601 також підтримує часові зони. У Python це можна зробити, додавши інформацію 
про часову зону до об'єкта datetime:

✂️ Цей код можна запустити!

from datetime import datetime, timezone, timedelta

# Час у конкретній часовій зоні
timezone_offset = timezone(timedelta(hours=2))  # Наприклад, UTC+2
timezone_datetime = datetime(year=2023, month=3, day=14, hour=12, minute=30, second=0, 
tzinfo=timezone_offset)

# Конвертація у формат ISO 8601
iso_format_with_timezone = timezone_datetime.isoformat()
print(iso_format_with_timezone)

Виведення:

2023-03-14T12:30:00+02:00

Ці методи в datetime модулі роблять роботу з ISO форматом простою та ефективною, дозволяючи 
легко інтегрувати стандартизоване представлення дат та часу в Python-програми.

Ключові аспекти: методи для роботи з часовими зонами у Python

Отже, ми розглянули такі методи та принципи роботи з ними:

Додавання інформації про часову зону до об'єкта datetime:

Метод astimezone використовується для перетворення об'єкта datetime з однієї часової зони 
в іншу. Наприклад, це може бути використано для конвертації часу з UTC в інші часові зони.

Перетворення локального часу в час UTC:

Спочатку призначаємо локальному часу відповідну часову зону.
Використовуємо astimezone для конвертації в UTC. Цей підхід допомагає зручно працювати з 
локальним та всесвітнім часом.

Форматування у форматі ISO 8601 із часовою зоною:

Використовуємо isoformat для отримання рядка з об'єкта datetime у форматі ISO 8601 з 
часовою зоною. Це корисно для представлення дати та часу у єдиному стандартізованому вигляді.