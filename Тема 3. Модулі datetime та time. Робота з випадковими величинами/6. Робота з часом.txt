Робота з часом

Модуль time у Python надає функції для роботи з часом, зокрема з часовими мітками 
timestamps, паузами виконання для програми, а також іншими часовими операціями.

Модуль використовується для різноманітних задач, пов'язаних з часом, включаючи логування, 
таймінг операцій, створення пауз виконання програми, обробку часових міток та форматування 
часу для відображення користувачам. Є базовим інструментом для роботи з часом у Python, 
хоча він і не включає підтримку часових зон або складних операцій з датами, які 
забезпечуються розглянутим раніше модулем datetime.

Розглянемо основні методи модуля time

Метод time.time() повертає поточний час у секундах з 1 січня 1970 року (epoch time).

✂️ Цей код можна запустити!

import time

current_time = time.time()
print(f"Поточний час: {current_time}")

Виведення:

Поточний час: 1702857932.326853

Метод time.sleep(seconds) зупиняє виконання програми на вказану кількість секунд. Наприклад 
цей код зупиняє виконання програми на 5 секунд.

✂️ Цей код можна запустити!

import time

print("Початок паузи")
time.sleep(5)
print("Кінець паузи")

Метод time.ctime([seconds]) перетворює часову мітку (кількість секунд) у зрозуміле для 
людини текстове представлення. Якщо аргумент не вказаний, використовується поточний час.

✂️ Цей код можна запустити!

import time

current_time = time.time()
print(f"Поточний час: {current_time}")

readable_time = time.ctime(current_time)
print(f"Читабельний час: {readable_time}")

Виведення:

Поточний час: 170285823.9412928
Читабельний час: Mon Dec 18 02:08:43 2023

Метод time.localtime([seconds]) перетворює часову мітку в структуру struct_time у місцевій часовій зоні.

✂️ Цей код можна запустити!

import time

current_time = time.time()
print(f"Поточний час: {current_time}")

local_time = time.localtime(current_time)
print(f"Місцевий час: {local_time}")

Виведення:

Поточний час: 1702861070.8583968
Місцевий час: time.struct_time(tm_year=2023, tm_mon=12, tm_mday=18, tm_hour=2, 
tm_min=57, tm_sec=50, tm_wday=0, tm_yday=352, tm_isdst=0)

Об'єкт time.struct_time в Python є іменованим кортежем, який використовується для 
представлення часу. Кожен елемент кортежу має особливе значення, що представляє 
певний компонент дати та часу:

- tm_year - рік
- tm_mon - місяць від 1 до 12
- tm_mday - день місяця від 1 до 31
- tm_hour - години від 0 до 23
- tm_min - хвилини від 0 до 59
- tm_sec - секунди від 0 до 59
- tm_wday - день тижня від 0 до 6
- tm_yday - день року від 1 до 366
- tm_isdst - прапорець літнього часу. 0 означає, що літній час не діє, 
            -1 - інформація відсутня, 1 - літній час діє

Метод time.gmtime([seconds]) схожий на localtime, але повертає struct_time у UTC.

Досить важливим є метод time.perf_counter(), який надає доступ до лічильника з високою 
точністю, та є ідеальним для вимірювання коротких інтервалів часу.

Цей лічильник має найвищу доступну точність для вимірювання коротких часових періодів і 
використовується в основному для визначення часу виконання коду.

Як це працює? Метод time.perf_counter() повертає значення в секундах (як дійсне число) з 
деякого моменту, наприклад з моменту запуску програми, і це значення монотонно збільшується. 
Це означає, що воно може використовуватися для точного вимірювання відрізків часу.

Давайте використаємо time.perf_counter() для вимірювання часу виконання деякого блоку коду:

✂️ Цей код можна запустити!

import time

# Записуємо час на початку виконання
start_time = time.perf_counter()

# Виконуємо якусь операцію
for _ in range(1_000_000):
    pass  # Просто проходить цикл мільйон разів

# Записуємо час після виконання операції
end_time = time.perf_counter()

# Розраховуємо та виводимо час виконання
execution_time = end_time - start_time
print(f"Час виконання: {execution_time} секунд")

У цьому прикладі ми вимірюємо час, необхідний для проходження циклу мільйон разів. 
Змінні start_time і end_time вимірюють час на початку та в кінці циклу, відповідно, 
а різниця між ними дає нам загальний час виконання операцій циклу.

Виведення:

Час виконання: 0.04927480001060758 секунд

Метод дуже корисний для точного вимірювання часу виконання коду, особливо у випадках, 
коли потрібно визначити продуктивність або оптимізувати певні аспекти програми.

В цьому прикладі ми зустріли декілька нових речей. Перше, це що в Python представлення 
чисел з підкресленнями _ є способом зробити великі числа більш читабельними. Наприклад, 
число 1_000_000 еквівалентне 1000000.

✂️ Цей код можна запустити!

# Один мільйон
a = 1_000_000
print(a)  # Виведе 1000000

# Десять мільйонів
b = 10_000_000
print(b)  # Виведе 10000000

# Один мільярд
c = 1_000_000_000
print(c)  # Виведе 1000000000

Підкреслення в цьому контексті є просто візуальними розділювачами, які допомагають легше 
сприймати великі числа, але не впливають на їхню числову величину чи поведінку.

Друге, це оператор pass, який використовується як заповнювач або "пуста" інструкція. 
Він не робить нічого і використовується там, де синтаксис вимагає наявності хоча б однієї 
інструкції, але вам не потрібно виконувати жодних дій.

Іншими словами, pass можна використовувати для позначення місця в коді, яке може бути 
заповнене пізніше. В нашому прикладі, pass використовується всередині циклу for. Це означає, 
що на кожній ітерації циклу виконується pass, який не робить нічого. Цикл просто проходить 
мільйон ітерацій, не виконуючи жодної дії на кожній з них.

Є і інші випадки використання pass наприклад у функціях:

def my_function():
    pass

Тут pass використовується у функції, яка поки що не має вмісту.

Оператор pass є корисним для тимчасового "заповнення" місця в коді, що дозволяє вашій 
програмі виконуватися, навіть коли певні частини ще не були реалізовані.

Ключові аспекти: основні методи модуля time в Python

- time.time(): Повертає поточний час у секундах з 1 січня 1970 року (epoch time).
- time.sleep(seconds): Зупиняє виконання програми на вказану кількість секунд.
- time.ctime([seconds]): Перетворює часову мітку в текстове представлення, зрозуміле для людини.
- time.localtime([seconds]): Перетворює часову мітку в структуру struct_time у місцевій часовій зоні.
- time.gmtime([seconds]): Аналогічно localtime, але повертає struct_time у форматі UTC.
- time.perf_counter(): Повертає лічильник з високою точністю для вимірювання коротких інтервалів часу.