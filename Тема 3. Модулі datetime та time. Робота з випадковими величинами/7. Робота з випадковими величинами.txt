Робота з випадковими величинами

Робота з випадковими величинами є важливою частиною багатьох областей, включаючи статистику, 
інженерію, науку про дані та фінанси. Випадкова величина — це змінна, значення якої є 
результатом випадкових явищ або експериментів. Існують два основних типи випадкових величин: 
дискретні та неперервні.

Дискретні випадкові величини: Це такі, які приймають обмежену кількість значень або значення, 
які можна перелічити. Наприклад, кількість монет, що випали решкою у серії підкидань, є 
дискретною випадковою величиною.
Неперервні випадкові величини: Вони можуть приймати будь-яке значення у певному діапазоні. 
Наприклад, змінна, яка представляє час, необхідний для виконання певної задачі, є неперервною 
випадковою величиною.

Робота з випадковими величинами в програмуванні є ключовим елементом багатьох програмних 
застосунків, від ігор до наукових симуляцій. Для генерації випадкових (псевдовипадкових) 
чисел у Python є пакет random. Він досить хороший для ряду звичайних завдань, але не для 
криптографії. Бо на жаль, вбудований генератор псевдовипадкових чисел досить скоро починає 
повторюватися і не є достатньо криптостійким. Проте, для прикладних завдань поза сферою 
криптографії його цілком вистачає. Розглянемо основні методи пакету які можуть нам знадобиться в роботі.

Для отримання випадкового цілого числа з рівномірного розподілу в інтервалі між a та b 
включно треба використати метод random.randint(a, b). Він повертає випадкове ціле число 
N таке, що a <= N <= b:

import random

random.randint(1, 1000)

Це метод, наприклад, підходить для симуляції кидка кубика:

✂️ Цей код можна запустити!

import random

dice_roll = random.randint(1, 6)
print(f"Ви кинули {dice_roll}")

Виведення:

Ви кинули 2

Метод random.random() потрібен, щоб отримати випадкове число в інтервалі 0, 1. 
Він генерує випадкове дійсне число між 0.0 (включно) та 1.0 (не включно):

✂️ Цей код можна запустити!

import random

num = random.random()
print(num)

Виведення:

0.7189476089786198

Оскільки це випадкове число вивід кожен раз буде іншим.

Припустимо, вам потрібно симулювати випадкове відсоткове заповнення. Можна використовувати 
random.random() для цього:

✂️ Цей код можна запустити!

import random

fill_percentage = random.random() * 100
print(f"Заповнення: {fill_percentage:.2f}%")

Виведення:

Заповнення: 64.01%

Тут в f рядку з'явилось форматування {fill_percentage:.2f} яке вказує, яким чином відображати 
змінну fill_percentage. Вираз .2 це кількість знаків після десяткової крапки. У цьому випадку 
вказано, що потрібно відображати два знаки для дійсного числа. Символ f означає, що число має 
бути відображене у форматі дійсного числа.

☝ Відсоток - це спосіб вираження числа як частини зі ста. Один відсоток, записаний як 1%, є 
еквівалентом 1/100 або однієї сотої частини. Тож, коли ми говоримо, що щось становить 50%, 
це означає 50 зі 100 або половину цілого.
Щоб перетворити відсоток у дріб, ділимо число на 100. Наприклад, 20% стане 20/100 або 0.20. 
Для перетворення дробу в відсоток, множимо його на 100. Так, 0.20 стане 20%.

Метод random.randrange(start, stop[, step]) повертає випадково вибране число з заданого діапазону.

Параметри методу:

- start - нижня межа діапазону (включно). Це початкове значення, з якого може починатися випадковий вибір. 
    Якщо не вказано, за замовчуванням приймається нуль, і діапазон починається з 0.
- stop - верхня межа діапазону (не включно). Це означає, що вибране випадкове число буде меншим, 
    ніж це значення. Цей параметр є обов'язковим, і метод не буде працювати без нього.
- step - крок між можливими значеннями. Наприклад, якщо встановити step як 2, метод буде вибирати 
    лише парні числа або числа, кратні 2, в залежності від start. Цей параметр є необов'язковим і 
    за замовчуванням дорівнює 1, що означає, що вибір відбувається з усіх послідовних чисел у діапазоні.

Тому щоб вибрати випадкове число від 0 до 9:

import random
print(random.randrange(10))  # Верхня межа є 10, але не включається

Наприклад симуляція пострілу по мішені, але необхідно вибрати випадковий номер від 1 до 10, 
та лише непарні числа:

✂️ Цей код можна запустити!

import random

target = random.randrange(1, 11, 2)
print(f"Ціль: {target}")

Виведення:

Ціль: 3

Коли у вас є список об'єктів і вам потрібно перемішати порядок елементів в цьому списку на 
випадковий, ми використовуємо метод random.shuffle(x), де x - список, який потрібно перемішати.

Перемішування колоди карт:

✂️ Цей код можна запустити!

import random

cards = ["Туз", "Король", "Дама", "Валет", "10", "9", "8", "7", "6"]

random.shuffle(cards)

print(f"Перемішана колода: {cards}")

Виведення:

Перемішана колода: ['Дама', 'Валет', 'Туз', '9', '6', 'Король', '10', '7', '8']

Якщо потрібно вибрати випадковий елемент зі списку, нам потрібно використати метод 
random.choice(seq), де seq - послідовність для вибору: список або кортеж.

Вибір випадкового фрукта:

✂️ Цей код можна запустити!

import random

fruits = ['apple', 'banana', 'orange']
print(random.choice(fruits))

Виведення:

banana

Щоб вибрати більше чим один випадковий елемент зі списку, нам необхідний метод 
random.choices(). Він використовується для генерації випадкової вибірки із послідовності. 
Цей метод може повернути один або декілька елементів з вказаної послідовності, при цьому 
дозволяючи повторення елементів у вибірці.

Синтаксис методу random.choices() наступний:

random.choices(population, weights=None, cum_weights=None, k=1)


- population - послідовність список, з якої має бути зроблений вибір.
- weights - опціональний список, який вказує ймовірності (ваги) кожного елемента в списку population. 
    Ці ваги визначають, наскільки ймовірно, що конкретний елемент буде обраний. Довжина списку weights 
    має бути дорівнювати довжині списку population.
- cum_weights - теж опціональний список кумулятивних ваг. Якщо він вказаний, то список weights 
    ігнорується. Кумулятивна вага кожного елемента визначається як сума його ваги плюс ваги всіх 
    попередніх елементів.
- k: Кількість елементів для вибору. За замовчуванням k=1.

Простий вибір випадкового елемента зі списку:

✂️ Цей код можна запустити!

import random

items = ['яблуко', 'банан', 'вишня', 'диня']
chosen_item = random.choices(items, k=1)
print(chosen_item)  

Вибирає один фрукт зі списку:

['диня']

Вибір декількох елементів з можливістю повторень:

✂️ Цей код можна запустити!

import random

numbers = [1, 2, 3, 4, 5]
chosen_numbers = random.choices(numbers, k=3)
print(chosen_numbers)

Може вибрати будь-які три числа, наприклад:

[3, 3, 5]

Вибір з вагами:

✂️ Цей код можна запустити!

import random

colors = ['червоний', 'зелений', 'синій']
weights = [10, 1, 1]
chosen_color = random.choices(colors, weights, k=1)
print(chosen_color)  

Елемент 'червоний' має набагато більшу ймовірність бути обраним:

['червоний']

random.choices() - це гнучкий метод для створення випадкових вибірок з можливістю зазначення 
ймовірностей для кожного елемента та можливістю повторень у вибірці.

Якщо виникає необхідність вибрати N елементів зі списку і вони при цьому не повторювалися 
треба використати метод random.sample(population, k). Він повертає список довжиною k з 
унікальними елементами, вибраними випадково з population.

Створення випадкової команди з 4 учасників з групи з 10 осіб:

✂️ Цей код можна запустити!

import random

participants = ['Анна', 'Богдан', 'Віктор', 'Галина', 'Дмитро', 'Олена', 'Женя', 'Зорян', 'Ігор', 'Йосип']
team = random.sample(participants, 4)
print(f"Команда: {team}")

Виведення:

Команда: ['Анна', 'Віктор', 'Олена', 'Галина']

Зверніть увагу, що k не може бути більше довжини participants.

Останній корисний метод, який розглянемо це random.uniform(a, b). Метод повертає випадкове 
дійсне число N, таке що a <= N <= b.

Приклад генерації випадкової ціни для продукту в межах від 50 до 100:

✂️ Цей код можна запустити!

import random

price = random.uniform(50, 100)
print(f"Випадкова ціна: {price:.2f}")

Виведення:

Випадкова ціна: 69.64

Ключові аспекти: методи для роботи з випадковими величинами

- random.randint(a, b): Отримання випадкового цілого числа з рівномірного розподілу в інтервалі 
    між a та b включно.
- random.random(): Отримання випадкового числа в інтервалі між 0.0 (включно) та 1.0 (не включно).
- random.randrange(start, stop[, step]): Отримання випадкового числа з заданого діапазону, 
    з можливістю вказати крок між значеннями.
- random.shuffle(x): Перемішування порядку елементів у списку x.
- random.choice(seq): Вибір випадкового елемента з послідовності seq (списку або кортежу).
- random.choices(population, weights=None, cum_weights=None, k=1): Генерація випадкової вибірки 
    з можливістю зазначити ймовірності для кожного елемента та повторення у вибірці.
- random.sample(population, k): Отримання унікальних випадкових елементів зі списку population довжиною k.
- random.uniform(a, b): Отримання випадкового дійсного числа N такого, що a <= N <= b.