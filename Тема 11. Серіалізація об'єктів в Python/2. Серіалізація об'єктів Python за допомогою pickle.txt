Серіалізація об'єктів Python за допомогою pickle

Для виконання серіалізації та десеріалізації об'єктів важлива швидкість, коректність і невеликий 
розмір пам'яті, який при цьому використовується, і тут найкраще підійде пакет pickle.

Модуль pickle дозволяє серіалізувати об'єкти Python у потік байтів та десеріалізувати потік байтів 
назад у об'єкти. Це виправдано та корисно для зберігання об'єктів у файлах або передачі даних через мережу.

Основна мета pickle — зберегти стан об'єкта так, щоб його можна було точно відновити пізніше 
і часто в іншому місці.

У пакета pickle є дві пари парних методів:

Упакування у byte-рядки та розпакування із byte-рядків

Метод dumps запаковує в byte-рядок об'єкт, а метод loads потім розпаковує назад з byte-рядка 
в об'єкт. Ці методи потрібні, коли ми хочемо контролювати, що робити з byte представленням, 
наприклад, відправити його мережею або прийняти з мережі.

import pickle

# Об'єкт для серіалізації
my_data = {"key": "value", "num": 42}

# Серіалізація об'єкта в байтовий рядок
serialized_data = pickle.dumps(my_data)
# Виведе байтовий рядок
print(serialized_data)  

# Десеріалізація об'єкта з байтового рядка
deserialized_data = pickle.loads(serialized_data)
# Виведе вихідний об'єкт Python
print(deserialized_data)


Виведення:

b'\\x80\\x04\\x95\\x1b\\x00\\x00\\x00\\x00\\x00\\x00\\x00}\\x94(\\x8c\\x03key\\x94
\\x8c\\x05value\\x94\\x8c\\x03num\\x94K*u.'
{'key': 'value', 'num': 42}

У цьому прикладі метод pickle.dumps(data) перетворює словник data в серіалізований байтовий 
рядок serialized_data. Далі pickle.loads(serialized_data) перетворює байтовий рядок назад 
в об'єкт Python, дозволяючи вам працювати з ним як зі звичайним словником.