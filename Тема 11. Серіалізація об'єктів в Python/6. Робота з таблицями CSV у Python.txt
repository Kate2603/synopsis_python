Робота з таблицями CSV у Python

Ще один формат обміну інформацією, що дуже часто використовується — це табличне представлення. 
Відкритий формат для зберігання табличних даних, який підтримується будь-яким 
редактором — це формат CSV.

CSV (Comma-Separated Values) — формат файлу, що використовується для зберігання табличних 
даних. Його назва походить від основної ідеї - використання коми для відділення значень в 
середині рядка. Однак на практиці як роздільник можуть використовуватися й інші символи, 
наприклад крапка з комою ; або знак табуляції. CSV файл легко читається та створюється як 
людьми, так і програмами, що робить його популярним вибором для обміну даними.

Файл CSV складається з рядків, і кожен рядок представляє один запис. Записи поділяються на 
поля, які розділені зазвичай комами. Перший рядок у файлі часто використовується для 
заголовків, що описують зміст кожного поля у записах.

Припустімо, що у нас є таблиця з даними про студентів, яка містить ім'я, вік та спеціальність. 
У форматі CSV ця таблиця може виглядати наступним чином:

name,age,specialty
Василь Гупало,30,Математика
Марія Петренко,22,Фізика
Олександр Коваленко,20,Інформатика

Тут кома використовується як роздільник, а перший рядок містить заголовки полів.

CSV файли широко використовуються для обміну даними між різними програмами та системами. 
Наприклад, таблиці з даними можуть бути експортовані з баз даних або електронних таблиць 
у форматі CSV для подальшого використання в інших програмах. Оскільки CSV є текстовим 
форматом, його можна легко створювати, редагувати або переглядати за допомогою простих 
текстових редакторів. Цей файл спокійно можна завантажити в Google Excel і працювати з 
ним як зі звичайною таблицею.

У Python робота з CSV файлами значно спрощується завдяки вбудованому модулю csv. 
Цей модуль надає функціонал для читання з та запису в CSV файли.

Для читання даних з CSV файлу можна використовувати функцію csv.reader, що повертає об'єкт, 
який ітерує по рядках файлу.

import csv

# Відкриваємо CSV файл
with open("data.csv", newline="", encoding="utf-8") as csvfile:
    # Створюємо об'єкт reader
    reader = csv.reader(csvfile, delimiter=",")
    # Проходимося по кожному рядку у файлі
    for row in reader:
        print(", ".join(row))

Виведення:

name, age, specialty
Василь Гупало, 30, Математика
Марія Петренко, 22, Фізика
Олександр Коваленко, 20, Інформатика

При відкритті файлу ми використали параметр newline='' для правильної обробки рядків 
незалежно від операційної системи. Параметр encoding='utf-8' гарантує коректне читання файлу з кирилицею.

Новим для нас тут є параметр newline=''. Різні операційні системи використовують різні 
символи для позначення кінця рядка в текстових файлах: Windows використовує повернення 
каретки та переведення рядка \r\n, Linux та MacOS використовує лише переведення рядка \n, 
старі версії MacOS, до версії 10 взагалі використовували повернення каретки \r.

Коли ми відкриваємо файл для читання чи запису, параметр newline='' інструктує Python не 
проводити жодної спеціальної обробки символів кінця рядка. Наш CSV файл може бути створений 
або використаний у різних операційних системах і неправильна обробка кінців рядків може 
призвести до з'єднання рядків або невірного їх розділення, що порушить структуру даних у файлі. 
Тому використання newline='' забезпечує, що модуль csv коректно інтерпретує кінці рядків 
незалежно від операційної системи, в якій виконується код.

Для запису даних у CSV файл можна використати функцію csv.writer. Вона дозволяє легко 
записувати рядки даних у файл.

import csv

# Дані для запису
rows = [
    ["name", "age", "specialty"],
    ["Василь Гупало", 30, "Математика"],
    ["Марія Петренко", 22, "Фізика"],
    ["Олександр Коваленко", 20, "Інформатика"],
]

# Відкриваємо файл для запису
with open("data.csv", "w", newline="", encoding="utf-8") as csvfile:
    # Створюємо об'єкт writer
    writer = csv.writer(csvfile, delimiter=",")
    # Записуємо рядки даних
    writer.writerows(rows)

За допомогою writer.writerows(rows) можна записати кілька рядків одразу. Якщо потрібно 
записати один рядок, можна використати writer.writerow(row).

Модуль csv також надає класи csv.DictReader і csv.DictWriter, які дозволяють працювати з 
рядками як зі словниками. Це зручно, коли у файлі CSV є заголовки стовпців.

Розглянемо пару прикладів, щоб зрозуміти як це працює. Бо використання DictReader і DictWriter 
полегшує доступ до полів за їхніми назвами та автоматизує процес запису заголовків стовпців.

import csv

# Запис у CSV файл зі словників
with open("students.csv", "w", newline="", encoding="utf-8") as csvfile:
    fieldnames = ["name", "age", "specialty"]
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()
    writer.writerow({"name": "Олег Олегов", "age": 23, "specialty": "Історія"})
    writer.writerow({"name": "Анна Сергіївна", "age": 22, "specialty": "Біологія"})

# Читання з CSV файлу в словники
with open("students.csv", newline="", encoding="utf-8") as csvfile:
    reader = csv.DictReader(csvfile)
    for row in reader:
        print(row["name"], row["age"], row["specialty"])

Виведення:

Олег Олегов 23 Історія
Анна Сергіївна 22 Біологія

Сам файл "students.csv" буде виглядати наступним чином.

name,age,specialty
Олег Олегов,23,Історія
Анна Сергіївна,22,Біологія

Інструкція csv.DictWriter(csvfile, fieldnames=fieldnames) створює об'єкт для запису, 
де fieldnames є списком назв полів, який визначає порядок і заголовки колонок у CSV файлі. 
Як зрозуміло з назви методу writer.writeheader() записує рядок заголовків у файл. 
І нарешті writer.writerow() використовується для запису кожного рядка даних у файл. 
Дані передаються у формі словника, де ключі відповідають назвам полів, визначеним у fieldnames.

При читанні файлу CSV csv.DictReader(csvfile) створює об'єкт для ітерації по рядках файлу, де 
кожен рядок представлений як словник. Ключі у цих словниках відповідають заголовкам у першому 
рядку CSV файлу. У циклі for row in reader: кожен row є словником, де можна доступитися до 
значень полів за їхніми іменами.

Наступний приклад:

import csv

FILENAME = "users.csv"

users = [
    {"name": "Микола", "age": 22, "gender": "male"},
    {"name": "Марія", "age": 22, "gender": "female"},
    {"name": "Назар", "age": 22, "gender": "male"},
]

with open(FILENAME, "w", encoding="utf-8", newline="") as f:
    columns = users[0].keys()
    writer = csv.DictWriter(f, delimiter=",", fieldnames=columns)
    writer.writeheader()
    for row in users:
        writer.writerow(row)

with open(FILENAME, "r", encoding="utf-8", newline="") as f:
    reader = csv.DictReader(f)

    for row in reader:
        print(row)

Зверніть увагу, що тут ми імена колонок визначили через ключі першого словника у списку 
users: columns = users[0].keys().

Виведення:

{'name': 'Микола', 'age': '22', 'gender': 'male'}
{'name': 'Марія', 'age': '22', 'gender': 'female'}
{'name': 'Назар', 'age': '22', 'gender': 'male'}

Файл "users.csv" :

name,age,gender
Микола,22,male
Марія,22,female
Назар,22,male

Підхід роботи з CSV файлами через класи DictReader та DictWriter робить код більш 
зрозумілим і забезпечує легкість у маніпуляції з даними, оскільки є можливість 
використовувати імена полів замість індексів. Що дозволяє писати більш легкий та підтримуваний код.