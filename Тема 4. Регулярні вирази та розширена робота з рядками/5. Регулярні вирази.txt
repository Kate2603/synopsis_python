Регулярні вирази



Регулярні вирази (regular expressions, часто скорочують як regex або regexp) - це потужний інструмент для роботи з текстом, який дозволяє шукати, замінювати або витягувати певні шаблони в тексті за допомогою спеціального синтаксису. Регулярні вирази широко використовуються в програмуванні, обробці тексту, а також у різних програмах та інструментах для роботи з даними.



Основні компоненти регулярних виразів включають:

Літерали. Пряме відображення символів (наприклад, a, B, 1).
Метасимволи. Символи, які мають спеціальне значення в регулярних виразах (наприклад, . (крапка) відповідає будь-якому символу).
Квантифікатори. Визначають, скільки разів елемент повинен відповідати (наприклад * означає 0 або більше повторень).
Класи символів. Визначають групи символів (наприклад, [a-z] відповідає будь-якій малій літері).
Групи та діапазони. Використовуються для групування частин виразу (наприклад, (abc) визначає групу символів).
Альтернації. Відповідає одному з декількох шаблонів (наприклад, a|b відповідає a або b).
Якорі. Визначають позиції у тексті (наприклад, ^ для початку рядка, $ для кінця рядка).


Регулярні вирази можуть бути досить складними, але вони надзвичайно потужні для розширеного пошуку та обробки тексту. Вони широко використовується у багатьох мовах програмування, а не тільки у Python.



Регулярні вирази дозволяють шукати певні шаблони в рядках, виконувати заміни, розбивати рядки на частини і багато іншого. Для роботи з регулярними виразами в Python використовується модуль re.



Основні функції модуля re які ми розглянемо далі це:

re.search(pattern, string) - виконує пошук першого входження шаблону в рядку.
re.findall(pattern, string) - виконує знаходження всіх входжень шаблону в рядку.
re.sub(pattern, repl, string) - виконує заміну входжень шаблону на інший рядок.
re.split(pattern, string) виконує розбивання рядка за шаблоном.


Основне завдання регулярних виразів — це пошук рядка, або підрядка, який відповідає опису в термінах регулярних виразів.



Використовуючи цей механізм можна робити наступні операції:

перевіряти, що рядок відповідає деяким вимогам (це номер телефону або email);
розділяти рядки на підрядки за деяким виразом (розбити текст на речення, використовуючи усі розділові знаки, а не тільки якийсь один);
замінювати підрядок в рядку (замінити усі слова, що починаються на деяку послідовність);
знаходити підрядок в рядку, який відповідає виразу.


Регулярні вирази знаходять застосування в багатьох областях, включаючи обробку тексту, валідацію даних, парсинг і скрапінг веб-сторінок, пошук і заміна в текстових редакторах та багато іншого. Вони є потужним інструментом для будь-якого програміста, який працює з текстовими даними.



Регулярний вираз або коротко "регулярка" складається зі звичайних символів і спеціальних командних послідовностей. Наприклад, \d задає будь-яку цифру, а \d+ — задає будь-яку послідовність з однієї або більше цифр. Це називається шаблони регулярних виразів.



Регулярні вирази використовують спеціальні символи для створення шаблонів. Вони складаються з блоків та модифікаторів.



Прикладом блоку може бути:

\w — будь-яка цифра або буква [a-zA-Z0-9_] (\W — все, крім букви або цифри [^a-za-z0-9_])
\d — будь-яка цифра [0-9] (\D — усе, крім цифри [^0-9])
\s — будь-який пробільний символ [\t\n\r\f\v] (\S — усе, крім пробільних символів [^\t\n\r\f\v])
\b — межа слова
[...] — один із символів у дужках ([^ ] — будь-який символ, крім тих, що в дужках)
^ і $ — початок і кінець рядка відповідно
( ) — групує вираз і повертає знайдений текст
\t, \n, \r — символ табуляції, нового рядка та повернення каретки


Модифікатори можуть вказувати на кількість повторень блоку у виразі, наприклад:



. — один будь-який символ, крім рядка \n
? — 0 або 1 входження шаблону зліва
+ — 1 і більше входжень шаблону зліва
* — 0 і більше входжень шаблону зліва
\ — екранування спец.символів (приклад: \. — означає крапку або \+ — знак "плюс")
{n} суворо n разів (n ціле число)
{n,m} — від n до m входжень (приклад: {,m} — від 0 до m)
a|b — відповідає a або b. Сам символ | означає "або" між двома шаблонами
( ) — групує вираз і повертає знайдений текст


Кожен з цих елементів дозволяє створювати гнучкі та потужні шаблони пошуку в тексті за допомогою регулярних виразів. Саме складання регулярних виразів — це дуже велика тема варта окремого вивчення. Але базові засади створення регулярних виразів ми з вами розберемо.



☝ Ось гарна стаття на тему регулярних виразів, там багато прикладів і корисних посилань.


Для роботи з регулярними виразами у Python є стандартний модуль re. Щоб скористатися цим модулем, його потрібно спочатку імпортувати:



import re



Загальним для усіх функцій модуля re є те, що першим аргументом йде регулярний вираз у вигляді рядка.





Метод search



Модуль re у Python надає інструменти для роботи з регулярними виразами. Одна з основних функцій цього модуля - re.search(), яка використовується для пошуку першого входження шаблону в рядку. Регулярний вираз - це шаблон, який використовується для знаходження певних комбінацій символів у рядках.



Синтаксис:



re.search(pattern, string)



pattern: Регулярний вираз (шаблон), який ви хочете знайти.
string: Рядок, у якому ви хочете знайти шаблон.


Результат виконання re.search() це спеціальний об'єкт Match, якщо знаходить відповідність. Якщо відповідність не знайдена, повертає None.



Об'єкт Match має властивості та методи, що використовуються для отримання інформації про пошук та результат:



Match.span() повертає кортеж, що містить початкову та кінцеву позиції збігу.
Match.string повертає рядок, переданий у функцію,
Match.group() повертає частину рядка, в якому був збіг


Ви можете використати метод .group() у цьому об'єкті, щоб отримати відповідну частину рядка.



Наприклад, виконаємо пошук слова "Python" у рядку.



✂️ Цей код можна запустити!

import re

text = "Вивчення Python може бути веселим."
pattern = "Python"
match = re.search(pattern, text)

if match:
    print("Знайдено:", match.group())
else:
    print("Не знайдено.")



У цьому прикладі ми шукаємо пряме входження слова "Python". Якщо знаходимо, виводимо знайдене слово. Виведення:



Знайдено: Python



Тепер використаємо метасимволи, та виконаємо пошук слова, що починається на "в" та закінчується на "м".



✂️ Цей код можна запустити!

import re

text = "Вивчення Python може бути веселим."
pattern = r"в\w*м"
match = re.search(pattern, text, re.IGNORECASE)

if match:
    print("Знайдено:", match.group())



Тут змінна pattern зберігає регулярний вираз r"в\w*м":

r означає "сирий" рядок (raw string), який каже Python ігнорувати спеціальні символи такі як \n, \t тощо, оскільки це рядок для регулярних виразів.
в - шукаємо слово яке починається на букву "в".
\w* - це означає будь-яка кількість букв включно з нулем букв. Бо \w відповідає будь-якому "словесному" символу, а * є квантифікатором, який означає "нуль або більше входжень попереднього елемента".
м - шукаємо слово яке закінчується на "м".


В функцію search ми передаємо параметр re.IGNORECASE, який робить пошук нечутливим до регістру. А отже слово може бути як з великих так і малих літер.



Виведення:

Знайдено: веселим



Розглянемо простеньку задачу - знаходження електронної адреси в рядку.



✂️ Цей код можна запустити!

import re

text = "Моя електронна адреса: example@example.com"
pattern = r"\w+@\w+\.\w+"
match = re.search(pattern, text)

if match:
    print("Електронна адреса:", match.group())



У цьому прикладі регулярний вираз \w+@\w+\.\w+ шукає електронну адресу:



\w+ - спочатку повинні йти одна або більше букв або цифр.
@ - далі обов'язково повинен бути символ @.
\w+ - після символу @ повинна йти ще одна серія букв.
\. - серія букв повинна закінчитись символом крапки. Ми екрануємо його, бо в регулярному виразі, крапка є модифікатором та має спеціальне значення.
\w+ - далі йде серія букв після крапки.


Отже функція re.search за цим шаблоном повинна знайти електронну адресу в рядку. Виведення:



Електронна адреса: example@example.com



Цей приклад демонструє регулярний вираз до складного шаблону, такого як електронна адреса. Але треба сказати, що “справжні” регулярні вирази для пошуку електронної адреси набагато складніші, ми використали мінімально необхідний.



Припустимо, у нас є рядок з електронною адресою, і ми хочемо вилучити ім'я користувача та домен цієї електронної адреси окремо. Треба розділити "username@domain.com" на "username" (ім'я користувача) та "domain.com" (домен).



Рішення:



✂️ Цей код можна запустити!

import re

email = "username@domain.com"
pattern = r"(\w+)@(\w+\.\w+)"
match = re.search(pattern, email)

if match:
    user_name = match.group(1)
    domain_name = match.group(2)
    print("Ім'я користувача:", user_name)
    print("Домен:", domain_name)



Виведення:

Ім'я користувача: username
Домен: domain.com



Давайте трошки зробимо пояснення, що тут відбулося. Головне це наш регулярний вираз (\w+)@(\w+\.\w+). Перші круглі дужки (\w+) відповідають одному або більше словесним символам. Це група збігається з ім'ям користувача електронної адреси. Далі в нас відбувається пошук @ - символ, що розділяє ім'я користувача та домен. Він нам не потрібний і в дужки ми його не беремо. Другі круглі дужки (\w+\.\w+) відповідають за домену електронної адреси. Тут \w+ збігається з першою частиною домену, \. - це крапка, і ще один \w+ для збігу з доменом верхнього рівня (наприклад, "com").



Коли re.search() знаходить відповідність, вона повертає об'єкт Match. Методи match.group(1) та match.group(2) використовуються для вилучення тексту, що відповідає кожній групі в шаблоні.



Цей приклад показує, як круглі дужки можуть бути корисними для групування та вилучення специфічних частин тексту в регулярних виразах.

