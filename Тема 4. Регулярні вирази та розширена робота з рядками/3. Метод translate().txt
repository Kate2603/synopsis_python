Метод translate()



Метод translate() в Python використовується для перетворення рядків шляхом заміни певних символів іншими символами. Цей метод дозволяє вам вказати, які саме символи слід замінити та на що замінити, використовуючи так звану "таблицю перекладу" - спеціальний словник, що визначає відображення замін.



Тому перш ніж використовувати translate(), нам потрібно створити таблицю перекладу. Це можна зробити за допомогою методу str.maketrans(), який приймає два аргументи:



Рядок символів, які потрібно замінити.
Рядок символів, на які потрібно замінити.


Довжина обох рядків має бути однаковою, оскільки вони визначають взаємну відповідність символів.



Розглянемо приклад використання translate():



✂️ Цей код можна запустити!

intab = "aeiou"
outtab = "12345"
trantab = str.maketrans(intab, outtab)

str = "This is string example"
print(str.translate(trantab))



У цьому прикладі всі голосні літери 'a', 'e', 'i', 'o', 'u' у рядку замінюються відповідно на числа '1', '2', '3', '4', '5'. Результатом виконання коду буде рядок "Th3s 3s str3ng 2x1mpl2".



Метод translate() також може використовуватися для видалення певних символів із рядка. Для цього передайте в maketrans() третій аргумент - рядок символів, які потрібно видалити.



✂️ Цей код можна запустити!

intab = "aeiou"
trantab = str.maketrans('', '', intab)

str = "This is string example"
print(str.translate(trantab))



Цей приклад видаляє всі голосні літери з рядка, виводячи рядок "Ths s strng xmpl" без голосних.



Метод може бути використаний для різноманітних завдань з обробки тексту. Нормалізація тексту, це коли треба замінити або видалити специфічні символи. Операції кодування та декодування - створення простих кодувань шляхом заміни символів. Фільтрація тексту шляхом видалення небажаних символів, наприклад, пунктуації або цифр.



Метод є чудовим вибором для складніших завдань з обробки та трансформації рядків. Розглянемо пару більш складних задач.



Наприклад нам треба розробити програму, яка конвертує рядок, що містить шістнадцяткові числа (в якості окремих символів), у відповідний двійковий код.



Програма повинна обробляти як великі, так і малі літери шістнадцяткових чисел і перетворювати кожен символ на його чотирибітове двійкове представлення.



✂️ Цей код можна запустити!

symbols = "0123456789ABCDEF"
code = [
        '0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111',
        '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'
        ]

MAP = {}

for s, c in zip(symbols, code):
    MAP[ord(s)] = c
    MAP[ord(s.lower())] = c

result = "34 DF 56 AC".translate(MAP)
print(result)



Спочатку ми виконуємо ініціалізацію даних:



symbols = "0123456789ABCDEF"
code = [
        '0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111',
        '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'
        ]



Де:



symbols - рядок, що містить символи, які будуть перетворюватися.
code - список рядків з двійковим кодом, який відповідає кожному символу в symbols.


В даному конкретному випадку використання str.maketrans() для створення

таблиці перекладу не буде таким же ефективним, як вручну створена таблиця перекладу. Для створення таблиці ми використаємо словник MAP. Для цього ми використовуємо zip(symbols, code), який створює пари символ-двійковий код.



Далі цикл for проходить по цих парах, додаючи в MAP відповідність між Unicode кодом символу, за допомогою функції ord(s) та його двійковим кодом c. Для кожного символу додається як його верхній, так і нижній регістр s.lower().



MAP = {}

for s, c in zip(symbols, code):
    MAP[ord(s)] = c
    MAP[ord(s.lower())] = c



В нашому випадку ми отримаємо наступну таблицю перекладу MAP:



{
    48: "0000",
    49: "0001",
    50: "0010",
    51: "0011",
    52: "0100",
    53: "0101",
    54: "0110",
    55: "0111",
    56: "1000",
    57: "1001",
    65: "1010",
    97: "1010",
    66: "1011",
    98: "1011",
    67: "1100",
    99: "1100",
    68: "1101",
    100: "1101",
    69: "1110",
    101: "1110",
    70: "1111",
    102: "1111",
}



Де ключ це Unicode для символів "0123456789ABCDEF" в верхньому та нижньому регістрі, а значення відповідні елементи списку code.



☝ Функція ord() в Python - це вбудована функція, яка використовується для отримання Unicode коду символу. Коли ви працюєте з текстом в Python, кожен символ у рядку має відповідний числовий код - Unicode. Функція ord() приймає символ і повертає його Unicode код, який є цілим числом.


Далі ми використовуємо метод translate() для перетворення рядка "34 DF 56 AC" відповідно до нашої таблиці перекладу MAP. Метод кожен символ у вихідному рядку замінює на його двійкове представлення згідно з MAP.



result = "34 DF 56 AC".translate(MAP)
print(result)



Коли цей код виконується, він перетворює кожен символ у "34 DF 56 AC" в його відповідник у двійковому коді, використовуючи MAP. Це виведе двійкове представлення кожного шістнадцяткового символу.



00110100 11011111 01010110 10101100



Наступний приклад, це розробити програму, яка перетворює вхідний текстовий рядок на відповідний код мови Морзе.



✂️ Цей код можна запустити!

morze_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
              'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
              'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
              'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
              'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---',
              '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...',
              '8': '---..', '9': '----.'}

# Перетворення ключів словника на Unicode коди
table_morze_dict = {}
for k, v in morze_dict.items():
    table_morze_dict[ord(k)] = v

string = "Hello world"

result = ""

for ch in string:
    result = result + ch.upper().translate(table_morze_dict)

print(result)



Словник morze_dict, де ключами є латинські літери та цифри, а значеннями - відповідні коди у мові Морзе. З цього словника нам треба створити таблицю перекладу table_morze_dict, тому цей фрагмент коду відповідає саме за це:



table_morze_dict = {}
for k, v in morze_dict.items():
    table_morze_dict[ord(k)] = v



Цикл for проходить по кожному елементу словника morze_dict та для кожного ключа словника morze_dict використовуючи функцію ord(k) додає до словника table_morze_dict Unicode ключі та відповідні коди Морзе - значеннями.



Далі ми перетворюємо рядок string в рядок result але вже азбукою Морзе.



✂️ Цей код можна запустити!

string = "Hello world"

result = ""

for ch in string:
    result = result + ch.upper().translate(table_morze_dict)

print(result)



Ми виконуємо ініціалізацію змінної result для зберігання результату. Після цикл for проходить по кожному символу рядка string. За допомоги методу ch.upper() перетворюємо символ у верхній регістр, щоб відповідати ключам у таблиці table_morze_dict. Метод translate(table_morze_dict) використовується для заміни кожного символу його відповідником у мові Морзе згідно з таблицею table_morze_dict. Результат додається до result.



В кінці виконання коду змінна result містить перетворений рядок у мові Морзе, який виводиться на екран.



......-...-..--- .-----.-..-..-..



Який висновок можна зробити? Метод translate() є потужним інструментом, який пропонує більш гнучкі можливості порівняно з методом replace(), особливо коли вам потрібно зробити багато різних замін у одному рядку.