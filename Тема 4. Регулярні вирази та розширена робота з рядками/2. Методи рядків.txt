Методи рядків

Ми вже познайомилися з деякими методами рядків. Зараз розберемо методи, пов'язані з пошуком в 
рядках і створенням нових рядків.

Пошук у рядку

Для пошуку деякого символу або підрядка у рядку можна скористатися методом find:

✂️ Цей код можна запустити!

s = "Hi there!"

start = 0
end = 7

print(s.find("er", start, end)) # 5
print(s.find("q")) # -1

Виведення:

5
-1

Цей метод повертає індекс початку першого збігу в рядку s, починаючи з позиції start до позиції 
end. Якщо start та end не вказані, то пошук відбувається з початку і до кінця рядку. 
Метод повертає -1, якщо послідовність не знайдена.

Ще один метод пошуку підрядка у рядку дуже схожий на find — це index. Основна відмінність 
полягає в тому, що якщо index не знайде підрядок, то викличе виняток ValueError.

Якщо вам потрібно здійснити пошук підрядка у рядку справа, а не зліва як у find, то для цього 
існує метод rfind:

✂️ Цей код можна запустити!

s = 'Some words'

print(s.find("o"))
print(s.rfind('o'))

Вираз s.find("o") поверне 1, а вираз s.rfind('o') поверне 6 бо шукає справа рядка і матимемо
наступне виведення:

1
6

І "правий" аналог index — rindex:

✂️ Цей код можна запустити!

s = 'Some words'

print(s.index("o"))
print(s.rindex('o'))

Виведення:

1
6

Поділ та об'єднання рядків

Часта ситуація, коли необхідно розбити рядок на підрядки за деяким символом, наприклад, 
розбити текст на речення за символом крапки та пробілу після крапки, або речення за словами.

Метод split() у Python використовується для розбиття рядка на список підрядків на основі 
вказаного роздільника. Якщо роздільник не вказаний, за замовчуванням використовується пробіл.

Синтаксис методу split()

str.split(separator=None, maxsplit=-1)

де:

- separator - роздільник, за яким слід розділяти рядок. Якщо не вказано, рядок розділяється 
    за будь-яким пробілом.
- maxsplit - максимальна кількість розділень. Значення -1 означає "без обмежень".

Розглянемо приклад

✂️ Цей код можна запустити!

text = "hello world"
result = text.split()
print(result)  # Виведе: ['hello', 'world']

Виведення:

['hello', 'world']

У цьому прикладі рядок "hello world" розділяється на список з двох елементів: 'hello' та 'world' 
за пробілом.

Якщо ми хочемо розділити рядок вказаним роздільником то:

✂️ Цей код можна запустити!

text = "apple,banana,cherry"
result = text.split(',')
print(result)  # Виведе: ['apple', 'banana', 'cherry']

Тут рядок розділяється за комами і виведення буде наступним:

['apple', 'banana', 'cherry']

Метод split() широко використовується для обробки текстових даних, розбору користувацького вводу, 
читання даних з файлів та інших завдань, де потрібно розбити рядок на складові частини за певним 
критерієм. Це основний інструмент для роботи з рядками в Python.

Усі рядки незмінні, і якщо ми хочемо модифікувати рядок, є тільки один спосіб — створити новий 
рядок на основі вихідного. Усі методи, які якось "модифікують" рядки, насправді повертають нові 
рядки, ніяк не змінюючи оригінальний.

Метод join() у Python використовується для об'єднання послідовності рядків (наприклад, списку 
або кортежу) в один рядок з використанням вказаного роздільника. Цей метод викликається на 
рядковому об'єкті, який служить роздільником:

Синтаксис методу join()

string.join(iterable)

де:

- string - рядок роздільник, який буде вставлений між елементами послідовності.
- iterable - послідовність, список або кортеж рядків, які потрібно об'єднати.

По суті метод join(), є зворотною операцією до методу split.

Розглянемо типовий приклад

✂️ Цей код можна запустити!

list_of_strings = ['Hello', 'world']
result = ' '.join(list_of_strings)
print(result)  # Виведе: 'Hello world'

У цьому прикладі список ['Hello', 'world'] об'єднується в один рядок з пробілом як роздільником 
і на виході в змінній result ми отримаємо рядок 'Hello world'.

Використаємо різні роздільники, як наприклад ', ' - це кома та пробіл.

✂️ Цей код можна запустити!

elements = ['earth', 'air', 'fire', 'water']
result = ', '.join(elements)
print(result)  # Виведе: 'earth, air, fire, water'

Тут рядки із списку elements об'єднуються з комою і пробілом як роздільниками.

Виведення буде наступним:

earth, air, fire, water

Якщо потрібно видалити зайві пробіли на початку і в кінці рядка, є спеціальний метод strip:

✂️ Цей код можна запустити!

clean = '   spacious   '.strip()
print(clean) # spacious

Виведення буде рядок "spacious" без пробілів зліва та права.

У цього метода є два "брати":

"лівий", lstrip, видаляє тільки пробіли на початку рядка;
та "правий", rstrip, видаляє тільки пробіли в кінці рядка.

Коли ж нам потрібно замінити деякий підрядок в рядку, ми можемо скористатися методом replace. 
Метод replace() у Python використовується для заміни підрядка на інший підрядок у рядку. 
Цей метод повертає новий рядок, де кожне входження вказаного підрядка замінено на інший підрядок.

Метод replace() має наступний синтаксис

str.replace(old, new, count=-1)

де:

- old - підрядок, який потрібно замінити.
- new - підрядок, на який потрібно замінити.
- count - лічильник максимальної кількості замін. Якщо не вказано або вказано -1, 
    замінюються всі входження.

Розглянемо приклад, який в рядку "Hello world" слово "world" замінює на слово "Python".

✂️ Цей код можна запустити!

text = "Hello world"
new_text = text.replace("world", "Python")
print(new_text) 

Виведення:

Hello Python

Якщо нам треба обмеження кількості замін, то:

✂️ Цей код можна запустити!

text = "one fish, two fish, red fish, blue fish"
new_text = text.replace("fish", "bird", 2)
print(new_text)  

Тут метод replace() замінює перші два входження слова "fish" на слово "bird".

one bird, two bird, red fish, blue fish

Метод replace() також застосовують для видалення підрядка

✂️ Цей код можна запустити!

text = "Hello, world!"
new_text = text.replace(" world", "")
print(new_text)

У цьому прикладі підрядок " world" видаляється з рядка. Виведення:

Hello,!

Загалом метод replace() широко використовується для обробки тексту в Python.

Та може бути корисним коли необхідно:

Виправлення помилок у тексті
Заміну специфічних символів або слів
Форматування даних для виводу
Видалення або заміна чутливих даних перед виводом або збереженням

Цей метод також є одним з основних інструментів для роботи з рядками в Python, дозволяючи 
легко і швидко змінювати вміст рядків.

Для видалення фіксованої послідовності на початку рядка є метод removeprefix:

✂️ Цей код можна запустити!

print('TestHook'.removeprefix('Test')) # Hook
print('TestHook'.removeprefix('Hook')) # TestHook

Виведення, в першому випадку 'Test' є префіксом рядка та буде видалений, в другому 
'Hook' це суфікс рядка і видалений не буде:

Hook
TestHook

Є парний метод для видалення послідовності в кінці рядка, removesuffix:

✂️ Цей код можна запустити!

print('TestHook'.removesuffix('Test'))
print('TestHook'.removesuffix('Hook'))

Виведення, тут зворотна ситуація і вже видаляється 'Hook':

TestHook
Test

Розглянемо наступну задачу та використаємо основні інструменти для роботи з рядками - 
методи split() та replace(). Ви маєте URL пошукового запиту, і ваше завдання - видобути та 
обробити параметри цього запиту. Наприклад пошуковий запит "Cat and dog"

<https://www.google.com/search?q=Cat+and+dog&ie=utf-8&oe=utf-8&aq=t>

Параметри в URL зазвичай слідують після символу ? та розділені символами &. Кожен параметр 
складається з ключа та значення, розділених символом =.

Нам треба написати код, який обробляє URL пошукового запиту, щоб видобути параметри запиту 
та перетворити їх у формат, з яким легше працювати в Python. Коли ви вводите пошуковий запит 
у браузері, він формує URL, де ваш запит та інші налаштування кодуються як ряд параметрів. 
Наш код повинен "розпаковувати" ці параметри, перетворюючи їх на словник Python, де ми можемо 
легко отримати доступ до кожного параметра за його ім'ям.

Тож почнемо. Спочатку нам треба отримати частини запиту з URL:

✂️ Цей код можна запустити!

url_search = "<https://www.google.com/search?q=Cat+and+dog&ie=utf-8&oe=utf-8&aq=t>"
_, query = url_search.split('?')
print(query)

Виведення:

q=Cat+and+dog&ie=utf-8&oe=utf-8&aq=t

Змінна url_search - це наш початковий URL. Далі операція url_search.split('?') розділяє 
URL на дві частини: до знаку ? та після. Оскільки нас цікавить лише частина після ?, 
ми використовуємо символ _ для ігнорування частини URL до ?. Та отримуємо змінну query 
яка рядок, що містить необхідні нам параметри запиту.

Далі ми додамо до нашого коду обробку параметрів запиту:

✂️ Цей код можна запустити!

url_search = "<https://www.google.com/search?q=Cat+and+dog&ie=utf-8&oe=utf-8&aq=t>"
_, query = url_search.split('?')
print(query)

obj_query = {}
for el in query.split('&'):
    key, value = el.split('=')
    obj_query.update({key: value.replace('+', ' ')})
print(obj_query)

Виведення:

q=Cat+and+dog&ie=utf-8&oe=utf-8&aq=t
{'q': 'Cat and dog', 'ie': 'utf-8', 'oe': 'utf-8', 'aq': 't'}

Давайте розбиратися, що тут відбувається. Ми створюємо порожній словник obj_query для 
зберігання параметрів запиту. Вираз query.split('&') розділяє рядок на окремі параметри за 
символом & та формує наступний список ['q=Cat+and+dog', 'ie=utf-8', 'oe=utf-8', 'aq=t']. В 
середині циклу, кожен параметр el містить ключ та значення, розділені символом =. Спочатку 
ми розділяємо кожен параметр el на ключ та значення key, value = el.split('=').

Вираз obj_query.update({key: value.replace('+', ' ')}) додає пару ключ-значення до 
словника obj_query. Але ми ще виконуємо value.replace('+', ' ') і замінює символи + на пробіли, 
оскільки у URL пробіли зазвичай кодуються як +. Після завершення циклу виводиться оброблений 
словник obj_query, де ключі та значення відповідають параметрам запиту.

Такий підхід часто використовується у веб-розробці та обробці даних для роботи з інформацією, 
отриманою з інтернет-запитів.

Останній метод який ми розглянемо це isdigit(). Він використовується для перевірки, чи складається 
рядок повністю з цифр. Цей метод повертає True, якщо всі символи в рядку є цифрами та рядок 
складається принаймні з одного символу, інакше повертає False.

✂️ Цей код можна запустити!

number = "12345"
print(number.isdigit())  # Виведе: True

text = "Number123"
print(text.isdigit())  # Виведе: False

У цьому прикладі, isdigit() повертає True для рядка "12345", оскільки він складається 
виключно з цифр. Для рядка "Number123", метод повертає False, оскільки він містить інші 
символи, крім цифр.

Можна застосовувати для перевірки, чи ввів користувач число.

✂️ Цей код можна запустити!

user_input = input("Введіть число: ")
if user_input.isdigit():
    print("Це дійсно число!")
else:
    print("Це не число!")

Виконувати перевірку на цифрові символи в рядку.

✂️ Цей код можна запустити!

for char in "Hello 123":
    if char.isdigit():
        print(f"'{char}' - це цифра")
    else:
        print(f"'{char}' - не цифра")

Цей код перевіряє кожен символ в рядку та друкує, чи є цей символ цифрою.

Виведення:

'H' - не цифра
'e' - не цифра
'l' - не цифра
'l' - не цифра
'o' - не цифра
' ' - не цифра
'1' - це цифра
'2' - це цифра
'3' - це цифра