Метод split



Функція re.split() в модулі re Python використовується для розбивання рядка за заданим регулярним виразом. Це дозволяє розділяти текст на частини за складнішими критеріями, ніж простий рядковий метод split().



Синтаксис:



import re

list_of_elements = re.split(pattern, string)



pattern - регулярний вираз, який використовується як роздільник.
string - рядок, який потрібно розділити.


Метод повертає список рядків, розділених за заданим регулярним виразом.



Почнемо з простого, та розділимо рядок на слова, використовуючи пробіли як роздільники.



✂️ Цей код можна запустити!

import re

text = "Python - це проста, але потужна мова програмування."
pattern = r"\s+"
words = re.split(pattern, text)

print(words)  # Виведе список слів у рядку



У цьому прикладі \s+ відповідає одному або більше пробільним символам (пробіл, табуляція тощо). І виведення буде як у звичайного метода split():



['Python', '-', 'це', 'проста,', 'але', 'потужна', 'мова', 'програмування.']



Спробуємо розділити рядок на частини, використовуючи пунктуаційні знаки як роздільники.



✂️ Цей код можна запустити!

import re

text = "Python - потужна; проста, універсальна: мова!"
pattern = r"[;,\-:!\s]+"
elements = re.split(pattern, text)

print(elements)  # Виведе список частин, розділених пунктуацією



Тут регулярний вираз [;,\-:!\s]+ збігається з будь-якою послідовністю одного або більше символів з набору ;, ,, -, :, ! або будь-якого пробільного символу. Завдяки квантифікатору +, послідовність роздільників розглядається як один роздільник, що допомагає уникнути створення пустих рядків у результаті виведення.



['Python', 'потужна', 'проста', 'універсальна', 'мова', '']



Останній пустий елемент, кінець рядка, можна видалити зрізами elements[:-1:], якщо є бажання. Чому він виник? Коли ви використовуєте re.split() для розділення рядка, функція шукає входження шаблону (роздільника) і розбиває рядок кожного разу, коли знаходить цей шаблон. Якщо шаблон присутній на кінці рядка, а в нас в кінці рядка знак оклику !, re.split() розділить рядок після цього шаблону, що призводить до створення додаткового пустого рядка.



Виконаємо, ще один розділ рядка за шаблоном, що містить кілька можливих роздільників. Зауважимо, що звичайний метод split() таке вже зробити не зможе.



✂️ Цей код можна запустити!

import re

text = "apple#banana!mango@orange;kiwi"
pattern = r"[#@;!]"
fruits = re.split(pattern, text)

print(fruits)



У цьому прикладі [#@;!] створює набір символів, який включає #, @, ;, і !, кожен з яких може бути використаний як роздільник. І ми отримуємо список з фруктами:



['apple', 'banana', 'mango', 'orange', 'kiwi']



Застосування re.split є дуже корисним для розділення рядків, коли вам потрібно використовувати більш складні критерії, ніж просте розділення за фіксованим символом. Та особливо корисно в задачах обробки тексту, де потрібно розділити рядки за різними символами або шаблонами.

Ключові аспекти: основні функції модуля re



Регулярні вирази в Python - потужний інструмент для пошуку, заміни та маніпуляції текстовою інформацією. Вони дозволяють виконувати складні операції над рядками за допомогою досить лаконічного синтаксису. Основні функції модуля re, які ми розглянули:



re.search(pattern, string) - використовується для пошуку першого входження шаблону в рядку. Повертає об'єкт Match, якщо відповідність знайдена.
re.findall(pattern, string) - знаходить всі входження шаблону в рядку. Повертає список всіх знайдених відповідностей.
re.sub(pattern, repl, string) - замінює всі входження шаблону в рядку на інший рядок. Використовується для модифікації та форматування тексту.
re.split(pattern, string) - розбиває рядок за заданим шаблоном. Повертає список рядків, отриманих після розділення.


Використання регулярних виразів вимагає розуміння їхнього синтаксису та особливостей. Спеціальні символи, такі як *, +, ?, квадратні та круглі дужки, мають конкретні функції у регулярних виразах. Розуміння цих елементів дозволяє виконувати складні операції пошуку та редагування з текстом.

Коректне застосування регулярних виразів може значно спростити обробку тексту, автоматизацію задач та вирішення складних проблем обробки даних.

1. Який метод у Python використовується для заміни входжень патерну у рядку?

--re.findall()
--re.split()
!-re.sub()
--re.search()

Правильно! Метод re.sub() використовується для заміни входжень патерну у рядку.

2. Яка функція Python використовується для знаходження всіх входжень патерну у рядку?

--re.sub()
!-re.findall()
--re.match()
--re.search()

Правильно! re.findall() знаходить всі входження патерну у рядку.

3. Що символізує символ ^ у регулярних виразах?

--Будь-який символ
--Кінець рядка
!-Початок рядка
--Буквальний символ каретки

Вірно! Символ ^ в регулярних виразах означає початок рядка.

4. Як у Python представити будь-який один символ у регулярному виразі?

-- \w
-- *
!- .
-- \d

Правильна відповідь символ ., а інші символи мають різне значення але точно не будь який символ у регулярних виразах.

5. Що робить вираз f"{value:%}" у форматуванні рядків Python?

!-Конвертує value в відсоток
--Форматує value як грошову суму
--Екранізує символ відсотка у рядку
--Знаходить залишок від ділення value на 100

Правильно! f"{value:%}" використовується для конвертації значення у відсоткове вираження.

6. Що робить метод split() у Python?

!-Розділяє рядок на список підрядків на основі розділювача
--Розділяє список на кілька рівних частин
--Розділяє рядок на окремі символи
--Розділяє об'єкт дати на його компоненти, дата та час

Правильно! Метод split() розділяє рядок на підрядки на основі заданого розділювача.

7. Які символи в регулярному виразі Python відповідають будь-якій цифрі та будь-якій букві відповідно?

!- \d та \w
-- \s та \D
-- \w та \S
-- \D та \s

Правильно! У регулярних виразах, \d відповідає будь-якій цифрі, а \w - будь-якій букві або цифрі.

8. Як у регулярних виразах Python позначається група символів, яка може зустрічатися 0 або більше разів?

-- +
!- *
-- ?
-- .

Правильно! Символ * в регулярних виразах використовується для позначення групи символів, яка може повторюватися 0 або більше разів.

9. У регулярних виразах Python, яка функція використовується для пошуку першого входження шаблону в рядку?

-- re.findall()
-- re.match()
!- re.search()
-- re.sub()

Правильно! re.search() шукає перше входження заданого шаблону в рядку.


