Регулярні вирази та розширена робота з рядками
Ми вже вивчили базову роботу з рядками у Python. Ви вмієте створювати рядки, об'єднувати рядки, міняти регістр рядків, перевіряти, що рядок закінчується або починається деякою послідовністю. Але можливості Python по роботі з рядками не вичерпуються цим. На цьому зайнятті ми дізнаємося більше про те, як працювати з рядками у Python, про роботу з регулярними виразами та перетвореннями рядків.



Варіанти створення рядків

Для створення рядків можна скористатися одинарними або подвійними лапками:



this_is_string = "Hi there!"

the_same_string = 'Hi there!'

this_is_string == the_same_string# True




Але що робити, якщо нам потрібен текст із перенесенням рядків (коли в тексті більше одного рядка)? Для цього можна скористатися потрійним повторенням лапок:



text = """This is first line
And second line
Last third line"""

song = '''Jingle bells, jingle bells
Jingle all the way
Oh, what fun it is to ride
In a one horse open sleigh'''




В цьому прикладі змінна text містить три рядки, а song — чотири рядки.



Коли інтерпретатор виявляє лапки, повторені тричі, він сприймає усі символи до наступних трьох лапок, які закривають рядок, як символи рядка.



Зворотна ситуація, у вас є довгий рядок, який не повинен містити перенесень, але в коді його незручно відобразити одним рядком.



one_line_text = "Textual data in Python is handled with str objects, or strings. Strings are immutable sequences of Unicode code points. String literals are written in a variety of ways: single quotes, double quotes, triple quoted."



Щоб структурувати код і не додавати зайвих перенесень, ви можете розбити одну рядкову змінну на декілька частин:



one_line_text = "Textual data in Python is handled with str objects," \
                " or strings. Strings are immutable sequences of Unicode" \
                " code points. String literals are written in a variety " \
                " of ways: single quotes, double quotes, triple quoted."



Зверніть увагу на символ \ в кінці першого та другого рядка коду, він вказує інтерпретатору ігнорувати закінчення рядка і продовжити відразу з наступного.



Змінна one_line_text в обох прикладах буде містити один і той самий текст без перенесень.



У Python, коли ви поміщаєте два рядкових літерали поруч, вони автоматично конкатенуються (об'єднуються в один рядок). Це відомо як неявна конкатенація рядків:



("spam " "eggs") == "spam eggs"  # True



Вираз ліворуч та вираз праворуч — це два рівнозначні записи одного і того самого тексту 'spam eggs' і, з погляду Python, — вони нерозрізнені. У нашому випадку, "spam " та "eggs" - це два окремих рядкових літерала, але коли вони розміщені один за одним без оператора додавання (+), Python автоматично об'єднує їх у один рядок.



Ця особливість часто використовується для зручності, особливо при написанні довгих рядків і тому змінну one_line_text можна записати наступним чином.



one_line_text = ("Textual data in Python is handled with str objects,"
                " or strings. Strings are immutable sequences of Unicode"
                " code points. String literals are written in a variety "
                " of ways: single quotes, double quotes, triple quoted.")



Неявна конкатенація рядків - це корисна особливість мови Python, яка дозволяє писати більш чистий і читабельний код, особливо коли працюєте з довгими рядками або рядками, що формуються на основі декількох частин.



Наприклад, в майбутньому, це дуже допомагає при створенні SQL запитів до бази даних:



query = ("SELECT * "
         "FROM some_table "
         "WHERE condition1 = True "
         "AND condition2 = False")





Спеціальні символи

Спеціальні символи в рядках у Python, відомі також як екрановані символи або escape-символи, використовуються для представлення певних керувальних послідовностей або для включення символів, які не можна ввести безпосередньо у рядок коду.



Ці символи починаються з оберненої косої риски (backslash, \), після якої йде один або кілька символів, що визначають спеціальну послідовність. Це означає, що наступний за ним знак потрібно сприймати як спеціальний символ, а не буквально.



Ось основні керувальні символи які необхідно знати:








Наприклад, символ \n відповідає за перенос рядка (line break).



✂️ Цей код можна запустити!

print("Hello\nWorld")



Виведення буде слово після символу \n з нового рядка:



Hello
World



Інший приклад — горизонтальна табуляція \t (tab):



✂️ Цей код можна запустити!

print("Hello\tWorld")



При виведенні між словами буде символ табуляції:

 Hello	World



Приклад для повернення каретки \r (carriage return).



✂️ Цей код можна запустити!

print("Hello my little\rsister")



Виведення відбувається наступним чином: коли ми зустрічаємо символ \r, то повертаємося на початок рядка і продовжуємо виведення. Це перезаписує попередній вивід:



sistermy little



Керувальний символ \b забій (backspace).



✂️ Цей код можна запустити!

print("Hello\bWorld")



Виведення здійснюється на один символ вліво та виконує вивід залишку після керувального символу.



HellWorld



Також якщо нам треба виконати виведення зворотної косої риски.



✂️ Цей код можна запустити!

print("Hello\\World")



Виведення:



Hello\World



Щоб екранувати одинарні та подвійні лапки та дозволити використовувати лапки всередині рядкових літералів.



✂️ Цей код можна запустити!

print('It\'s a beautiful day')
print("He said, \"Hello\"")



Виведення:

It's a beautiful day
He said, "Hello"



Ці спеціальні символи часто використовуються для форматування тексту в рядках, управління виводом у консолі або терміналі, а також при роботі з даними у форматі Unicode. Вибирайте ту форму запису, яка більше підходить під конкретну ситуацію, і керуйтеся зручністю для запису і читання коду, який містить рядкову змінну.