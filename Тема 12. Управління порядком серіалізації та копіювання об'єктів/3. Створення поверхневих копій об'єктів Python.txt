Створення поверхневих копій об'єктів Python

Щоб створити "поверхневу" копію об'єкта, у пакеті copy є функція copy. Ця функція створює 
новий об'єкт такого самого типу і потім створює посилання на увесь вміст старого об'єкта в новий. 
Такий механізм досить хороший для роботи з об'єктами, де вже на першому рівні вкладеності немає 
змінних об'єктів, і він працює досить швидко.

import copy

my_list = [1, 2, {"name": "Gupalo Vasyl"}]
copy_list = copy.copy(my_list)
copy_list.append(4)
print(my_list)
print(copy_list)

Виведення:

[1, 2, {'name': 'Gupalo Vasyl'}]
[1, 2, {'name': 'Gupalo Vasyl'}, 4]

Поверхнева копія означає, що новий список copy_list буде містити нові посилання на ті ж самі 
об'єкти, що і оригінальний список і для об'єктів із глибокою вкладеністю така функція все ж таки 
не дасть потрібного ефекту. Тому вкладені об'єкти, такі як словник в третьому елементі списку, 
будуть спільними між оригінальним та скопійованим списками.

import copy

my_list = [1, 2, {"name": "Gupalo Vasyl"}]
copy_list = copy.copy(my_list)
copy_list[2]["age"] = 30
print(my_list)
print(copy_list)

Виведення:

[1, 2, {'name': 'Gupalo Vasyl', 'age': 30}]
[1, 2, {'name': 'Gupalo Vasyl', 'age': 30}]


З цього прикладу видно, що хоча copy_list вже є новим об'єктом, але вкладений у нього словник 
з індексом 2 — це один і той самий словник і в copy_list, і в my_list.

☝ Поверхнева копія створює новий об'єкт, але не копіює вкладені об'єкти. Замість цього, 
вона копіює лише посилання на вкладені об'єкти. Це означає, що якщо ви змінюєте вкладені 
об'єкти в оригіналі, ці зміни також відобразяться у поверхневій копії.