11. Основи ООП в Python

1. Що таке об'єктно-орієнтоване програмування (ООП)?

-- Програмування, засноване на функціях
-- Програмування, що використовує цикли
!- Програмування, засноване на взаємодії об'єктів
-- Програмування, що використовує умовні оператори

Вірно! ООП - це парадигма програмування, що використовує об'єкти та класи для моделювання реального світу.

2. Що таке клас у контексті ООП?

-- Змінна, що зберігає дані
-- Функція для обробки даних
!- Шаблон для створення об'єктів
-- Команда для виконання програми

Вірно! Клас - це шаблон, з якого створюються об'єкти.

3. Як створити простий клас у Python?

!- Використовуючи ключове слово class
-- За допомогою функції def
-- За допомогою ключового слова import
-- Використовуючи оператор =

Вірно! Ключове слово class використовується для визначення нового класу.

4. Що таке метод __init__ у класах Python?

-- Функція, що викликається для видалення об'єкта
!- Метод, що автоматично викликається при створенні об'єкта
-- Функція для додавання нових атрибутів
-- Метод для виведення даних об'єкта

Метод __init__ спеціально призначений для ініціалізації об'єктів, а не для їх видалення чи інших цілей.

5. Як правильно використовувати аргумент self у методах класу?

-- Для вказівки на глобальні змінні
-- Для передачі даних між функціями
!- Для доступу до атрибутів та методів об'єкта
-- Як ключове слово для створення нових методів

Вірно! self використовується для доступу до атрибутів і методів конкретного екземпляра класу.

6. Яка різниця між класом та об'єктом?

-- Клас це програма, а об'єкт це дані
!- Клас це шаблон, об'єкт це екземпляр класу
-- Клас і об'єкт це синоніми
-- Об'єкт створює класи, а клас визначає тип об'єкта

Вірно! Клас слугує шаблоном для створення об'єктів, які є конкретними екземплярами цього класу.

7. Що таке атрибут класу та як його визначити?

!- Змінна, визначена за межами методів класу
-- Змінна, що передається методам класу
-- Коментар в коді класу
-- Функція всередині класу

Атрибути класу відрізняються від локальних змінних методів і не визначаються через 
декоратори чи в параметрах функцій.

8. Як методи класу можуть взаємодіяти з полями класу?

-- Через прямий доступ до змінних
-- Використовуючи ключове слово static
-- Через глобальні змінні
!- Використовуючи ключове слово self

Вірно! Методи можуть звертатися до атрибутів екземпляра через self.

9. Яка різниця між атрибутами класу та полями класу?

-- Атрибути класу можна змінювати, а поля неможливо змінювати
!- Атрибути класу спільні для всіх екземплярів, а поля унікальні для кожного екземпляра
-- Атрибути класу зберігаються у файлі
-- Поля доступні тільки в методах класу

Атрибути класу і поля відрізняються своєю сферою видимості та доступності.

10. Як створити клас з декількома методами та викликати ці методи для екземпляра класу?

-- Використовуючи ключове слово import
-- Задаючи методи як глобальні функції
!- Оголошуючи методи всередині класу та викликаючи їх через екземпляр
-- Створюючи кожен метод у своєму файлі

Вірно! Методи оголошуються всередині класу та викликаються через екземпляр класу з 
використанням нотації крапки.

#######################################################################

11. Розширене ООП в Python

1. Які класи використовуються для створення модифікованих контейнерів у Python, згідно з 
пакетом collections ?

-- list , dict , set
!- UserDict , UserList , UserString
-- OrderedDict , defaultdict
-- Tuple , NamedTuple

Вірно! UserDict , UserList , і UserString дозволяють легко створювати користувацькі версії 
стандартних контейнерів Python.

2. Яким чином можна використати клас UserList для додавання унікальної поведінки до стандартного 
списку Python?

-- Для додавання елементів списку за умовами
-- Для зміна методів сортування списку
-- Для автоматичного видалення дублікатів у списку
!- Все вищевказане

UserList надає можливість не тільки змінювати поведінку стандартного списку, але й додавати 
унікальні функції, такі як умовне додавання елементів, сортування, та автоматичне видалення дублікатів.

3. Як використання декоратора @dataclass спрощує створення класів для зберігання даних?

!- Автоматизує генерацію конструктора __init__
-- Автоматично додає методи для серіалізації
-- Забезпечує автоматичну підтримку типізації
-- Всі вищевказані

Вірно! Декоратор @dataclass спрощує створення класів, автоматизуючи генерацію методу __init__ , 
що дозволяє економити час на написанні шаблону класу.

4. Які переваги дає використання перелічуваних типів (enums) у Python для представлення набору 
іменованих констант?

-- Полегшення дебагінгу коду
-- Забезпечення більшої гнучкості коду
-- Підвищення продуктивності програми
!- Поліпшення читабельності та виразності коду

Вірно! Enums в Python дозволяють коду бути більш читабельним та виразним, надаючи можливість 
використовувати іменовані константи замість магічних чисел.

5. Як створити власний перелічуваний тип (enum) і як він може бути використаний у програмі?

!- Через наслідування від базового класу Enum
-- Використовуючи декоратор @enum
-- За допомогою функції enumerate()
-- Через пряме визначення у глобальному просторі

Вірно! Для створення перелічуваного типу в Python необхідно наслідувати власний клас від 
базового класу Enum .

6. В чому полягає відмінність між композицією та агрегацією у контексті ООП?

-- Композиція використовується тільки для слабких зв'язків
-- Композиція вимагає, щоб об'єкти існували незалежно
-- Агрегація використовується для вказівки на сильну залежність
!- Композиція вказує на сильну залежність, а агрегація на слабку

Вірно! Композиція вказує на сильну залежність між класами, де об'єкти не можуть існувати окремо, 
тоді як агрегація дозволяє об'єктам залишатися незалежними.

7. Як створити власний виняток у Python?

!- Визначення класу, який наслідується від Exception
-- Використання функції raise з будь-яким об'єктом
-- Пряме використання вбудованих винятків без модифікацій
-- Імпорт винятків з модулів сторонніх бібліотек

Вірно! Створення власних винятків через наслідування від Exception дозволяє точніше керувати 
помилками та їх обробкою у програмі.

8. В чому полягає різниця між стандартною обробкою винятків і використанням власних винятків?

-- Власні винятки не можуть бути перехоплені
-- Стандартні винятки краще інтегруються з IDE
!- Власні винятки дозволяють точніше вказати причину помилки
-- Стандартні винятки завжди призводять до зупинки програми

Власні винятки забезпечують додаткову гнучкість та дозволяють більш точно визначити та обробити 
помилки у програмі, на відміну від стандартних винятків, які можуть бути занадто загальними.

#################################################################

12. Використання спеціальних методів для керування об'єктами

1. Які звуть методи в мові програмування Python, що відповідають за визначену 
поведінку об'єктів при використанні операторів або інших синтаксичних конструкцій?

-- Розширені методи
-- Динамічні методи
!- Магічні методи
-- Приховані методи

Вірно! Магічні методи, також відомі як спеціальні методи, дозволяють реалізувати 
операторне перевантаження та інші потужні механізми.

2. Як називається метод, призначений для однозначного представлення об'єкта у вигляді 
рядка в мові програмування Python?

--  __str__
!-  __repr__
--  __init__
--  __class__

Вірно! Метод __repr__ призначений для створення однозначного рядкового представлення 
об'єкта, що може бути корисним під час налагодження.

3. Яке призначення методу __str__ в мові програмування Python?

-- Створення однозначного рядкового представлення об'єкта.
-- Визначення операторного перевантаження.
!- Повернення читабельного інформаційного повідомлення, що відображає об'єкт.
-- Ініціалізація нового об'єкта класу.

Вірно! Метод __str__ призначений для повернення рядкового представлення об'єкта, 
основне призначене якого розуміння людиною.

4. Яке призначення методу __getitem__ в мові програмування Python?

!- Для визначення поведінки об'єкту при доступі до його елементів за допомогою індексу або ключа.
-- Для встановлення значення елемента за певним індексом або ключем.
--  створення рядкового представлення об'єкта.
--  визначення поведінки об'єкту при доступі до його методів.

Вірно! Метод __getitem__ визначає поведінку об'єкта при доступі до його елементів 
за допомогою індексу або ключа.

5. Яке призначення методу __setitem__ в мові програмування Python?

-- Для доступу до елементів об'єкта за допомогою індексу або ключа.
!-  встановлення значення елемента за певним індексом або ключем.
--  створення рядкового представлення об'єкта.
--  визначення, як об'єкт повинен поводитися при доступі до його методів.

Вірно! Метод __setitem__ визначає, як об'єкт повинен поводитися при присвоєнні 
значення елементу за певним індексом або ключем.

6. Яке призначення методу __pow__ в Python?

-- Для визначення поведінки оператора * між об'єктами класу.
!-  піднесення об'єкта до степеня.
-- Для оператора цілочисельного ділення.
--  визначення поведінки оператора - між об'єктами класу.

Так, метод __pow__ використовується для піднесення об'єкта до степеня.

7. Яке призначення методу __eq__ в Python?

-- Для виконання порівняння за допомогою оператора <=.
!- Для визначення поведінки під час перевірки на відповідність == .
-- Для виконання порівняння за допомогою оператора <.
-- Для виконання порівняння за допомогою оператора !=.

Так, метод __eq__ використовується для визначення, як об'єкти повинні порівнюватися 
між собою за оператором ==.

8. Яке призначення гетера в класі Python?

!- Отримання значення поля.
-- визначення значення поля.
-- Виконання додаткової обробки значення поля перед поверненням його користувачеві.
-- Виконання обчислень на основі значення поля.

Так, гетери використовуються для отримання значення поля і можуть виконувати 
додаткову обробку цього значення перед поверненням його користувачеві.

9. Яке призначення сетера в класі Python?

-- Отримання значення поля.
!- Встановлення значення поля.
-- Виконання додаткової обробки значення поля перед поверненням його користувачеві.
-- Виконання обчислень на основі значення поля.
Результат

Так, сетери використовуються для встановлення значення поля і часто використовуються 
для валідації даних перед призначенням їх полю.

10. Яка основна відмінність між статичними та класовими методами в Python?

!- Статичні методи не можуть змінювати стан класу, а класові методи можуть.
-- Статичні методи мають доступ до самого класу через параметр cls, тоді як класові 
методи не мають цього доступу.
-- Класові методи не можуть бути викликані без створення екземпляру класу, а статичні можуть.
-- Статичні методи мають доступ до екземпляру класу через параметр self, тоді як 
 методи не мають цього доступу.

Статичні методи не мають доступу до стану класу, але класові методи мають цей доступ і 
можуть змінювати стан класу.


Силка на урок:
https://youtu.be/8RjPApQ39sI

