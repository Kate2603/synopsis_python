
Захищені (Protected) атрибути та методи

Вони позначаються одним підкресленням _ на початку імені. Це лише конвенція, і захищені атрибути все ще 
можуть бути доступні ззовні, але це вважається поганою практикою змінювати їх ззовні.

class Person:
    def __init__(self, name: str, age: int, is_active: bool):
        self.name = name
        self.age = age
        self._is_active = is_active

    def greeting(self):
        return f"Hi {self.name}"

p = Person("Boris", 34, True)
print(p.name, p.age, p._is_active)
print(p.greeting())

Виведення:

Boris 34 True
Hi Boris

Поле _is_active має провідне нижнє підкреслення, щоб показати, що воно призначене для того, щоб бути захищеним. 
Поганою практикою в цьому контексті вважається доступ або зміна захищених атрибутів класу p._is_active ззовні 
цього класу або ззовні його нащадків. Що нами і зроблено але тільки в рамках демонстрації!

Коли ви взаємодієте з об'єктом, ідея полягає в тому, щоб використовувати його публічний інтерфейс (публічні 
методи та атрибути), а не безпосередньо звертатися до його внутрішньої реалізації або захищених частин. 
Отже, що хоча технічно можливо отримати доступ до цих атрибутів ззовні, це вважається порушенням принципів інкапсуляції.

Правильним підходом є забезпечення доступу до захищених атрибутів через публічні методи, які можуть включати 
додаткову логіку обробки або перевірки, тим самим підтримуючи безпеку та цілісність даних всередині класу.

Якщо ми хочемо взаємодіяти з захищеними полями об'єкту ззовні, необхідно впровадити правильний підхід до 
інкапсуляції у класі Person та слід використовувати методи для взаємодії з такими атрибутами об'єкту

class Person:
    def __init__(self, name: str, age: int, is_active: bool):
        self.name = name
        self.age = age
        self._is_active = is_active

    def greeting(self):
        return f"Hi {self.name}"
    
    def is_active(self):
        return self._is_active

    def set_active(self, active: bool):
        self._is_active = active

p = Person("Boris", 34, True)
print(p.name, p.age, p.is_active())
print(p.greeting())

Ми додали метод is_active, щоб отримати доступ для читання захищеного атрибута _is_active та метод set_active 
для зміни значення захищеного атрибута _is_active