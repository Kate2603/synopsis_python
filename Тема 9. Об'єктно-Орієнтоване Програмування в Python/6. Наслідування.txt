Наслідування

Основна сила об'єктно-орієнтованого програмування полягає саме в можливості наслідування класів. Наслідування дає можливість створювати нові класи, що містять атрибути батьківських класів.



Наслідування - це механізм ООП, який дозволяє одному класу переймати властивості та методи іншого класу. У Python це робиться шляхом оголошення класу, який "наслідується" від іншого класу.



Базовий або батьківський клас (superclass) це клас, від якого наслідуються властивості та методи.



Похідний або дочірній клас (subclass) це клас, який наслідує властивості та методи від базового класу.



Розглянемо приклад де буде базовий клас Animal. Він може мати загальні властивості для всіх тварин, наприклад, nickname (ім'я), age (вік) і метод make_sound() (видавати звук). А також похідні класи Cat, Dog та Cow, які наслідують властивості та методи від класу Animal, але також можуть мати свої унікальні методи або перевизначені методи базового класу.








class Animal:
    def __init__(self, nickname: str, age: int):
        self.nickname = nickname
        self.age = age

    def make_sound(self):
        pass

class Cat(Animal):
    def make_sound(self) -> str:
        return "Meow"

class Dog(Animal):
    def make_sound(self) -> str:
        return "Woof"

class Cow(Animal):  
    def make_sound(self):
        return "Moo"

my_cat = Cat("Simon", 4)
my_dog = Dog("Rex", 5)
my_cow = Cow("Bessie", 3)

print(my_cat.make_sound())  # Виведе "Meow"
print(my_dog.make_sound())  # Виведе "Woof"
print(my_cow.make_sound())  # Виведе "Moo"



У цьому прикладі клас Cat наслідує властивість nickname та метод make_sound() від класу Animal. Однак, в класі Cat метод make_sound() перевизначений, щоб повертати рядок "Meow". У класі Dog, метод make_sound() також перевизначений, щоб повертати "Woof", що є характерним звуком для собак. У класі Cow, метод make_sound() перевизначений, щоб повертати "Moo".



Класи Cat, Dog, і Cow є похідними класами, які наслідують властивості та методи від базового класу Animal. Це означає, що вони автоматично отримують властивості nickname, age і можуть використовувати метод make_sound().



Кожен екземпляр тварини має своє ім'я, вік та може видавати властивий для свого виду звук. Це демонструє, як наслідування дозволяє нам писати код, який є відновлюваним та легким для розширення.



У похідних класах можна визначати власні конструктори. Якщо ми хочемо зберегти поведінку базового класу і додати нові властивості, ми можемо використовувати конструкцію super() для виклику конструктора базового класу.



Розширимо наш приклад, додавши унікальну властивість до класу Dog - поле breed (порода).



class Dog(Animal):
def __init__(self, nickname: str, age: int, breed: str):
        super().__init__(nickname, age)  # Викликаємо конструктор базового класу
        self.breed = breed  # Додаємо нову властивість

    def make_sound(self):
        return "Woof"



Тут, super().__init__(nickname, age) викликає конструктор Animal, щоб встановити ім'я та вік собаки, а self.breed = breed встановлює породу собаки.



Конструкція super() використовується для забезпечення того, що методи базового класу можуть бути викликані з похідного класу, особливо коли ці методи перевизначаються. Це дуже корисно, коли ми хочемо розширити або змінити поведінку базового класу, не повністю переписуючи його.



Отже, якщо ми захочемо додати функціонал у всі дочірні для Animal класи, то для цього можна додати потрібні атрибути та методи в Animal і вони автоматично з'являться в класах Cat, Dog, і Cow. Як ми і зробили спочатку додавши атрибути name та age в Animal які присутні в цих класах. Якщо ж потрібно додати особливу поведінку для об'єктів собак, то можна додати або змінити атрибути класу Dog. Наприклад, додамо метод chase_tail() до класу Dog.



class Dog(Animal):
    def __init__(self, name, breed):
        super().__init__(name)  # Викликаємо конструктор базового класу
        self.breed = breed  # Додаємо нову властивість

    def make_sound(self) -> str:
        return "Woof"

    def chase_tail(self) -> str:
        return f"{self.name} is chasing its tail!"



Тепер клас Dog має унікальний метод, який не є частиною класу Animal і створення екземпляру собаки виглядає наступним чином:



my_dog = Dog("Rex", 5, "Golden Retriever")
print(my_dog.make_sound())  # Виведе "Woof"
print(my_dog.chase_tail())  # Виведе "Rex is chasing its tail!"



Собаки тепер в нас ганяються за своїм хвостом.

Повний код виглядатиме тепер так:



class Animal:
    def __init__(self, nickname: str, age: int):
        self.nickname = nickname
        self.age = age

    def make_sound(self):
        pass

class Cat(Animal):
    def make_sound(self) -> str:
        return "Meow"

class Dog(Animal):

    def __init__(self, nickname: str, age: int, breed: str):
        super().__init__(nickname, age)  # Викликаємо конструктор базового класу
        self.breed = breed  # Додаємо нову властивість

    def make_sound(self) -> str:
        return "Woof"

    def chase_tail(self) -> str:
        return f"{self.nickname} is chasing its tail!"

class Cow(Animal):
    def make_sound(self):
        return "Moo"

my_cat = Cat("Simon", 4)
my_cow = Cow("Bessie", 3)

print(my_cat.make_sound())  # Виведе "Meow"
print(my_cow.make_sound())  # Виведе "Moo"

my_dog = Dog("Rex", 5, "Golden Retriever")
print(my_dog.make_sound())  # Виведе "Woof"
print(my_dog.chase_tail())  # Виведе "Rex is chasing its tail!"



Виведення:

Meow
Moo
Woof
Rex is chasing its tail!



Таким чином у коді повинно бути лише одне місце, де визначено поведінку об'єкта. І якщо нам потрібно отримати інший об'єкт, який має цю поведінку і якісь свої особливості, ми можемо наслідуватись від класу з потрібними нам спільними атрибутами та додати унікальні. Цей підхід дозволяє писати менше коду та структурувати дані, створюючи моделі реальних об'єктів з їх характеристиками (полями) та поведінкою (методами).