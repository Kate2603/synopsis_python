10. Елементи функціонального програмування

1. Що таке каррінг у функціональному програмуванні?

-- Використання анонімних функцій, як аргумент функції
-- Перетворення функції на послідовність функцій з одним аргументом
!- Запуск функції на виконання в момент її визначення
-- Комбінування декількох функцій в одну функцію

Правильно. Каррінг полягає в перетворенні функції з декілька аргументами на послідовність функцій з одним аргументом.

2. Яка роль декораторів у Python?

-- Покращення продуктивності коду
!- Зміна поведінки функцій без зміни їх вихідного коду
-- Автоматичне тестування функцій
-- Запис інформації про виклики функцій

Декоратори не обов'язково впливають на продуктивність коду або виконують автоматичне тестування. Їх мета змінювати поведінку функцій без зміни їх вихідного коду.

3. Як працює functools.wraps у контексті декораторів?

-- Оптимізує виконання функції
-- Змінює поведінку функції
!- Зберігає метадані оригінальної функції
-- Автоматично записує результати функції

Вірно! functools.wraps використовується для збереження метаданих оригінальної функції при використанні декораторів.

4. Що генерує новий список, застосовуючи вказаний вираз до кожного елемента об'єкта ітерації, що існує?

!- List comprehension
-- Set comprehension
-- Dictionary comprehensions
-- Функція map()

Вірно! List comprehension створює новий список, застосовуючи вираз до кожного елемента об'єкта ітерації.

5. Що генерує новий словник, застосовуючи вказаний вираз до кожного елемента об'єкта ітерації, що існує?

-- List comprehension
-- Set comprehension
!- Dictionary comprehensions
-- Функція map()

Вірно! Dictionary comprehensions дозволяють створювати новий словник, застосовуючи вказаний вираз до кожного елемента об'єкта ітерації.

6. Що означає ключове слово lambda у Python?

-- Вказівник на функцію
-- Це цикл for в один рядок
!- Ключове слово для створення анонімних функцій
-- Синтаксис для створення нової змінної

Так, ключове слово lambda використовується для створення анонімних функцій.

7. Яка основна ідея функції filter() у Python?

-- Виконує вказані операції над кожним елементом колекції
-- Замінює всі елементи об'єкту ітерації згідно вказаного виразу
-- Об'єднує декілька списків в один список
!- Створює ітератор, що містить елементи, для яких задана функція повертає True

Вірно! Функція filter() створює ітератор, який містить елементи, для яких задана функція повертає True.

8. 1. Як використовується `map()` у функціональному програмуванні Python?

-- Для видалення певних елементів з колекції
-- Для генерації послідовностей чисел
!- Для застосування заданої функції до кожного елемента об'єкту ітерації
-- Як заміна циклу стандартного циклу for

Так, функція map() використовується для застосування заданої функції до кожного елемента об'єкту ітерації.

9. Що таке set comprehension у Python?

-- Метод для копіювання множин
!- Створення нових множин на основі існуючих об'єктів ітерації
-- Функція для порівняння двох множин
-- Техніка для видалення елементів зі множини без помилки

Вірно! Set comprehension дозволяє створювати нові множини на основі існуючих об'єктів ітерації.

10. Для чого використовується функція any() у Python?

-- Перевіряє, чи всі елементи в об'єкті ітерації є істинними
!- Перевіряє, чи принаймні один елемент в об'єкті ітерації є істинним
-- Перевіряє, чи жоден елемент в об'єкті ітерації не є істинним
-- Видаляє всі не істинні елементи з об'єкта ітерації

Так, функція any() перевіряє, чи принаймні один елемент в об'єкті ітерації є істинним.

11. Що робить функція all() у Python?

!- Перевіряє, чи всі елементи в об'єкті ітерації є істинними
-- Перевіряє, чи принаймні один елемент в об'єкті ітерації є істинним
-- Генерує список з усіх істинних елементів об'єкта ітерації
-- Визначає, чи є об'єкт ітерації пустим

Вірно! Функція all() перевіряє, чи всі елементи в об'єкті ітерації є істинними.