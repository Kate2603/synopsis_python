Функціональне програмування в Python

Функціональне програмування є парадигмою програмування, яка акцентує на використанні функцій та їх 
композиціях для обробки даних та побудови логіки програми. Хоча Python не є чисто функціональною мовою, 
він підтримує багато аспектів функціонального програмування.

Лямбда-функції

Буває, що нам потрібна функція, суть якої можна викликати, передавши їй аргументи, але сама функція 
дуже проста і її всю можна описати одним виразом. У таких ситуаціях немає особливого сенсу створювати 
функцію, використовуючи стандартний синтаксис і захаращувати простір імен.

Спеціально для таких випадків у Python є лямбда-функції, відомі також як анонімні функції, які є важливою 
частиною Python і використовуються для створення маленьких, однорядкових функцій.

Синтаксис лямбда-функції є наступним:

lambda arguments: expression

Тут lambda — це ключове слово, що вказує на початок лямбда-функції. arguments — це список аргументів, 
які приймає функція, а expression — це вираз, який буде виконано та його результат повернуто.

Розглянемо приклад

add = lambda x, y: x + y
print(add(5, 3))  # Виведе 8

У прикладі ми створили лямбда-функцію add, яка повертає суму двох чисел. Насправді це "поганий тон" 
зберігати лямбда-функції у змінних, вони повинні створюватися там, де будуть використовуватися і 
більше ніде у коді не залишають слідів.

print((lambda x, y: x + y)(5, 3))  # Виведе 8

Отже, що ми бачимо. Лямбда-функції не мають імені. Зазвичай використовуються для написання коротких 
функцій. Можуть містити тільки один вираз і не можуть містити блоки команд наприклад, цикли або умовні конструкції.

Лямбда-функції часто використовуються як аргументи для функцій вищого порядку, таких як map(), 
filter() або sorted(). Наприклад зворотне сортування списку для sorted():

nums = [1, 2, 3, 4, 5]
nums_sorted = sorted(nums, key=lambda x: -x)
print(nums_sorted)

Виведення:

[5, 4, 3, 2, 1]

Лямбда-функції ідеально підходять для виконання невеликих функціональних операцій, які не вимагають 
написання окремої іменованої функції. Вони є корисним інструментом у Python, але їх слід використовувати 
обережно, щоб зберегти читабельність коду. У випадках, коли логіка стає складною, краще використовувати 
звичайні функції з визначеним ім'ям.