Функція map

Один з прикладів використання лямбда-функцій — це генератор map.

Функція map() є функцією вищого порядку, що означає, що вона приймає іншу функцію як аргумент. 
map() використовується для застосування заданої функції до кожного елемента об'єкта ітерації, 
наприклад списку, та повертає ітератор, який виробляє результати.

Синтаксис:

map(function, iterable, ...)

function - функція, яку треба застосувати до кожного елемента в iterable.
iterable - об'єкт ітерації (список, кортеж тощо), елементи якого будуть оброблятися function.

Давайте напишемо за допомогою map генератор, який підносить числа із списку numbers до квадрату:

numbers = [1, 2, 3, 4, 5]

for i in map(lambda x: x ** 2, numbers):
    print(i)

В результаті виконання цього коду ви побачите:

1
4
9
16
25

В якості першого аргументу у map ми передали лямбда-функцію lambda x: x ** 2, яка повертає x у степені 2.

В результаті виконання виразу map(lambda x: x ** 2, numbers) ми отримаємо генератор, яким пройшлися в 
циклі for та вивели значення на кожній ітерації функцією print.

Якщо ми хочем отримати список, а не генератор то код можна записати так:

numbers = [1, 2, 3, 4, 5]

squared_nums = list(map(lambda x: x ** 2, numbers))
print(squared_nums)

Виведення:

[1, 4, 9, 16, 25]

Можна застосувати map до декількох списків:

nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
sum_nums = map(lambda x, y: x + y, nums1, nums2)

print(list(sum_nums))

Тут map() застосовує лямбда-функцію до елементів обох списків одночасно.

[5, 7, 9]

Але після того як в Python з'явився List comprehensions його використовують для того ж самого призначення, 
що забезпечує більшу читабельність та виразність.

Замість використання функції map():

numbers = [1, 2, 3, 4, 5]

squared_nums = list(map(lambda x: x ** 2, numbers))
print(squared_nums)

Ми використаємо list comprehensions:

nums = [1, 2, 3, 4, 5]
squared_nums = [x * x for x in nums]
print(squared_nums)

Та виконаємо теж саме перетворення елементів списку

[1, 4, 9, 16, 25]

Для двох списків ми теж можемо використати list comprehensions допомоги функції zip

nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
sum_nums = [x + y for x, y in zip(nums1, nums2)]
print(sum_nums)

Загалом переваги list comprehensions це читабельність та гнучкість. Втім вибір між map() та 
list comprehensions залежить від конкретної ситуації та переваг програміста.
