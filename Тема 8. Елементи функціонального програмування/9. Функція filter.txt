Функція filter

Функція filter() використовується для фільтрації об'єктів ітерації, таких як списки або кортежі, за 
допомогою заданої функції. Вона створює ітератор, який містить тільки ті елементи об'єкта ітерації, 
для яких функція-фільтр повертає True.

Нагадаємо, що у Python можна будь-який тип привести до boolean. До False приводяться 0, None та порожні 
контейнери. Рядки, списки, словники, множини, кортежі, всі інші випадки приводяться до True.

Синтаксис filter():

filter(function, iterable)

function - функція, яка визначає, чи слід включати елемент у результат. Ця функція повинна приймати один 
аргумент і повертати булеве значення True або False.
iterable - об'єкт ітерації (наприклад, список, кортеж), елементи якого будуть перевірятися функцією function.

Наприклад, виведемо список чисел, які є парними в інтервалі від 1 до 10:

even_nums = filter(lambda x: x % 2 == 0, range(1, 11))

print(list(even_nums))

У цьому прикладі ми передали у filter лямбда функцію lambda x: x % 2 == 0, яка повертає чи залишок 
від ділення дорівнює 0. Для кожного елемента послідовності з генератора range(1, 11) функція filter 
виконала перевірку лямбда-функцією та, якщо лямбда повернула True результат, то цей результат потрапляє 
у відфільтровану послідовність на виході.

[2, 4, 6, 8, 10]

Не обов'язково використовувати lambda функцію.

def is_positive(x):
    return x > 0

nums = [-2, -1, 0, 1, 2]
positive_nums = filter(is_positive, nums)

print(list(positive_nums))

У цьому прикладі filter() використовує функцію is_positive для відбору тільки додатних чисел:

[1, 2]

Інший приклад, давайте відфільтруємо з рядка літери, щоб залишилися лише літери нижнього регістру:

some_str = 'Видавництво А-БА-БА-ГА-ЛА-МА-ГА'

new_str = ''.join(list(filter(lambda x: x.islower(), some_str)))
print(new_str)

Виведення:

идавництво


Хоча filter() може бути корисним для багатьох сценаріїв, у деяких випадках list comprehensions можуть забезпечити більш читабельний та ефективний спосіб досягнення тих самих цілей.

Розглянемо, як можна замінити filter() на list comprehensions:

nums = [1, 2, 3, 4, 5, 6]
even_nums = [x for x in nums if x % 2 == 0]
print(even_nums)

Отримаємо той же самий список:

[2, 4, 6]

Для рядка літер:

some_str = 'Видавництво А-БА-БА-ГА-ЛА-МА-ГА'

new_str = ''.join([x for x in some_str if x.islower()])
print(new_str)

Таке саме виведення:

идавництво

Однак в цілому вибір між використанням filter() та list comprehensions залежить від конкретного випадку 
та особистих переваг програміста.