13. Функтори, Ітератори та Управління контекстом в Python

1. Що робить об'єкт класу Python, який має метод __call__?

-- Дозволяє об'єктам використовуватися як ітератори.
-- Дозволяє об'єктам зчитувати атрибути з інших об'єктів.
!- Дозволяє об'єктам бути викликаними як функції.
-- Дозволяє об'єктам перевіряти типи аргументів під час виклику.

Так, метод __call__ дозволяє об'єктам класу бути викликаними як функції.

2. Який з методів використовується для отримання наступного елемента під час ітерації об'єкта в Python?

-- __get__()
!- __next__()
-- __fetch__()
-- __retrieve__()

Так, метод __next__() використовується для отримання наступного елемента під час ітерації.

3. Як можна описати ітератор в контексті його використання?

!- Ітератор можна використовувати для послідовного перебору елементів, не завантажуючи всю 
послідовність у пам'ять.
-- Ітератор можна використовувати для одночасного доступу до всіх елементів у послідовності.
-- Ітератори можна використовувати тільки для зчитування даних з файлів.
-- Ітератори використовуються для створення масивів у Python.

Так, ітератори дозволяють послідовно перебирати елементи об'єкта ітерації, не завантажуючи всю 
послідовність у пам'ять, і неможливо повторно перебрати елементи з одного і того ж ітератора.

4. Який спосіб створення ітераторів в Python є спрощеним і автоматично реалізує методи __iter__() 
та __next__()?

-- Використання циклу for.
-- Використання методу iterator().
-- Використання ключового слова iter.
!- Використання генератора з ключовим словом yield.

Використання циклу for, методу iterator() або ключового слова iter не є спрощеним способом 
створення ітераторів з автоматичною реалізацією методів __iter__() та __next__().

5. Який метод використовується для взаємодії з генератором шляхом надсилання значення у генератор?

-- resume()
-- start()
!- send()
-- invoke()

Методи resume(), start() та invoke() не використовуються для взаємодії з генераторами у Python.

6. Які магічні методи необхідно реалізувати для створення власного менеджера контексту в Python?

-- __begin__ і __end__
-- __start__ і __finish__
-- __enter__ і __leave__
!- __enter__ і __exit__

Так, для створення власного менеджера контексту потрібно реалізувати методи __enter__ і __exit__. 
А методи __begin__ і __end__, __start__ і __finish__, __enter__ і __leave__ не використовуються 
для створення власних менеджерів контексту в Python.
