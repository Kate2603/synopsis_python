Статичні та класові методи

Статичні та класові методи є спеціальними типами методів, які можуть використовуватися 
в класах для різноманітних цілей. Вони схожі тим, що обидва викликаються без створення 
екземпляру класу, але мають різну мету та використовуються в різних сценаріях.

Статичні методи використовують декоратор @staticmethod і є методами, які не мають 
доступу до екземпляру класу тобто змінної self, з якого вони були викликані. 
Це означає, що статичні методи не можуть змінювати стан об'єкта або класу, але 
вони можуть бути корисними для виконання деяких операцій, які не залежать від 
стану об'єкта. Статичні методи можна розглядати як "допоміжні" функції, які мають 
логічний зв'язок із класом, але не потребують доступу до його атрибутів або методів.

Наприклад, якщо у нас є клас, який представляє геометричні фігури, ми можемо включити 
статичний метод для обчислення площі кола, використовуючи радіус, який передається як 
аргумент. Цей метод не залежить від конкретного екземпляру класу та може бути викликаний 
без створення об'єкта.

class Geometry:
    PI = 3.14159

    @staticmethod
    def area_of_circle(radius):
        return Geometry.PI * radius ** 2



У цьому прикладі area_of_circle є статичним методом, який обчислює площу кола, 
використовуючи переданий радіус. Цей метод може бути викликаний безпосередньо з класу 
без необхідності створення екземпляру класу.

Щоб використати цей метод ми викликаємо area_of_circle безпосередньо через клас Geometry, 
передаючи радіус як аргумент. Метод використовує цей радіус для обчислення та повертає площу кола.

print(Geometry.area_of_circle(5))  # 78.53975

Статичний метод не залежить від якогось конкретного екземпляру Geometry і може 
бути викликаний без створення такого екземпляру.
Класові методи використовують декоратор @classmethod і, на відміну від статичних методів, 
мають доступ до самого класу через параметр cls, який автоматично передається Python. 
Це означає, що класові методи можуть змінювати стан класу або викликати інші класові
 методи. Класові методи часто використовуються для фабричних методів, які створюють 
 екземпляри класу, використовуючи різні способи ініціалізації, ніж стандартний конструктор.

Наприклад, якщо ми маємо клас Employee, ми можемо використати класовий метод для 
створення екземплярів класу на основі інформації, отриманої з рядка або файлу.

class Employee:
    def __init__(self, name, position):
        self.name = name
        self.position = position

    @classmethod
    def from_string(cls, employee_info):
        name, position = employee_info.split(',')
        return cls(name, position)

В нашому коді, from_string є класовим методом, який дозволяє створювати екземпляри 
Employee, розбираючи рядок на поля. Метод використовує параметр cls для створення 
нового екземпляра, гарантуючи, що він може бути успішно використаний навіть у класах-нащадках. 
В нашому прикладі cls це буде сам клас Employee.

employee_info = "John Doe,Manager"
john_doe = Employee.from_string(employee_info)

print(john_doe.name)  # Виведе: John Doe
print(john_doe.position)  # Виведе: Manager

Ми викликаємо from_string, передаючи рядок з інформацією про співробітника. 
Метод розбирає рядок, використовуючи кому як роздільник, і створює новий екземпляр 
класу Employee, використовуючи отримані дані. Потім ми можемо використовувати цей 
екземпляр, як звичайний, звертаючись до його атрибутів name та position.

Різниця між статичними та класовими методами полягає в тому, що статичні методи 
використовуються для функцій, які не потребують доступу до атрибутів або методів класу, 
тоді як класові методи мають доступ до класу та його атрибутів, дозволяючи змінювати стан 
класу або створювати екземпляри класу за допомогою альтернативних конструкторів.

1. Які звуть методи в мові програмування Python, що відповідають за визначену 
поведінку об'єктів при використанні операторів або інших синтаксичних конструкцій?

-- Розширені методи
-- Динамічні методи
!- Магічні методи
-- Приховані методи

Вірно! Магічні методи, також відомі як спеціальні методи, дозволяють реалізувати 
операторне перевантаження та інші потужні механізми.

2. Як називається метод, призначений для однозначного представлення об'єкта у вигляді 
рядка в мові програмування Python?

--  __str__
!-  __repr__
--  __init__
--  __class__

Вірно! Метод __repr__ призначений для створення однозначного рядкового представлення 
об'єкта, що може бути корисним під час налагодження.

3. Яке призначення методу __str__ в мові програмування Python?

-- Створення однозначного рядкового представлення об'єкта.
-- Визначення операторного перевантаження.
!- Повернення читабельного інформаційного повідомлення, що відображає об'єкт.
-- Ініціалізація нового об'єкта класу.

Вірно! Метод __str__ призначений для повернення рядкового представлення об'єкта, 
основне призначене якого розуміння людиною.

4. Яке призначення методу __getitem__ в мові програмування Python?

!- Для визначення поведінки об'єкту при доступі до його елементів за допомогою індексу або ключа.
-- Для встановлення значення елемента за певним індексом або ключем.
--  створення рядкового представлення об'єкта.
--  визначення поведінки об'єкту при доступі до його методів.

Вірно! Метод __getitem__ визначає поведінку об'єкта при доступі до його елементів 
за допомогою індексу або ключа.

5. Яке призначення методу __setitem__ в мові програмування Python?

-- Для доступу до елементів об'єкта за допомогою індексу або ключа.
!-  встановлення значення елемента за певним індексом або ключем.
--  створення рядкового представлення об'єкта.
--  визначення, як об'єкт повинен поводитися при доступі до його методів.

Вірно! Метод __setitem__ визначає, як об'єкт повинен поводитися при присвоєнні 
значення елементу за певним індексом або ключем.

6. Яке призначення методу __pow__ в Python?

-- Для визначення поведінки оператора * між об'єктами класу.
!-  піднесення об'єкта до степеня.
-- Для оператора цілочисельного ділення.
--  визначення поведінки оператора - між об'єктами класу.

Так, метод __pow__ використовується для піднесення об'єкта до степеня.

7. Яке призначення методу __eq__ в Python?

-- Для виконання порівняння за допомогою оператора <=.
!- Для визначення поведінки під час перевірки на відповідність == .
-- Для виконання порівняння за допомогою оператора <.
-- Для виконання порівняння за допомогою оператора !=.

Так, метод __eq__ використовується для визначення, як об'єкти повинні порівнюватися 
між собою за оператором ==.

8. Яке призначення гетера в класі Python?

!- Отримання значення поля.
-- визначення значення поля.
-- Виконання додаткової обробки значення поля перед поверненням його користувачеві.
-- Виконання обчислень на основі значення поля.

Так, гетери використовуються для отримання значення поля і можуть виконувати 
додаткову обробку цього значення перед поверненням його користувачеві.

9. Яке призначення сетера в класі Python?

-- Отримання значення поля.
!- Встановлення значення поля.
-- Виконання додаткової обробки значення поля перед поверненням його користувачеві.
-- Виконання обчислень на основі значення поля.
Результат

Так, сетери використовуються для встановлення значення поля і часто використовуються 
для валідації даних перед призначенням їх полю.

10. Яка основна відмінність між статичними та класовими методами в Python?

!- Статичні методи не можуть змінювати стан класу, а класові методи можуть.
-- Статичні методи мають доступ до самого класу через параметр cls, тоді як класові 
методи не мають цього доступу.
-- Класові методи не можуть бути викликані без створення екземпляру класу, а статичні можуть.
-- Статичні методи мають доступ до екземпляру класу через параметр self, тоді як класові 
методи не мають цього доступу.

Статичні методи не мають доступу до стану класу, але класові методи мають цей доступ і можуть 
змінювати стан класу.


