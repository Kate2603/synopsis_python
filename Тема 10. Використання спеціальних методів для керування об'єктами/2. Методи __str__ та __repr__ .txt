Методи __str__ та __repr__ 

Магічні методи __str__ та __repr__ в Python відіграють ключову роль у представленні об'єктів у 
вигляді рядків. Знання та правильне використання цих методів дозволяє контролювати, як об'єкти 
вашого класу відображаються і використовуються, що є важливою частиною розробки Python програм.

Коли в інтерактивному режимі роботи з Python ми хочемо побачити вміст деякого об'єкту, ми 
просто пишемо його ім'я в консолі та інтерпретатор виводить рядком представлення цього об'єкта.

У консолі ми бачимо [1, 2] але ж ми не використовували функцію print, як це трапилось? 
За цей механізм внутрішнього читабельного представлення об'єктів відповідає 
магічний метод __repr__. Цей метод приймає лише один аргумент (звичайно це self) 
і повинен повертати рядок.

Метод __repr__ призначений для створення офіційного рядкового представлення об'єкта. 
Розробники використовують його для однозначного ідентифікування об'єкта або навіть 
для відтворення об'єкта в іншому місці коду. Таке представлення може бути надзвичайно 
корисним під час налагодження, оскільки воно дозволяє розробникам отримати точне 
уявлення про стан об'єкта.

Тому коли ми хочемо у випадках, коли застосунок повинен відобразити об'єкт, 
виводити якусь корисну інформацію, ми повинні модифікувати цей метод. Наприклад, 
клас точки на площині в Декартових координатах:

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __repr__(self):
        return f"Point(x={self.x}, y={self.y})"

point = Point(2, 3)
print(repr(point))  # Виводить: Point(x=2, y=3)

Виконайте цей код у консолі Python і ви побачите Point(x=2, y=3).

Але головне призначення __repr__ це створення офіційного рядкового представлення об'єкта, 
яке можна використати для відновлення об'єкта. Метод __repr__ має повертати рядок, який, 
ідеально, міг би бути використаний в коді для відтворення об'єкта з тими самими даними.

☝ Використання __repr__ дозволяє розробникам отримати детальне представлення об'єкта, 
яке може бути використане для точного відтворення об'єкта або для налагодження програми, 
допомагаючи ідентифікувати та виправляти помилки.

Це означає, що ви можете використовувати вираз, повернутий методом __repr__, 
як Python команду для створення нового об'єкта, який буде мати ті самі характеристики, 
що й оригінальний об'єкт. Ця особливість особливо корисна для налагодження, де ви можете 
легко відтворити об'єкти на основі їхнього __repr__ представлення.

Розглянемо наступний приклад з нашим класом Point:

class Point:
    def __init__(self, x: float, y: float):
        self.x = x
        self.y = y

    def __repr__(self):
        return f"Point(x={self.x}, y={self.y})"

original_point = Point(2, 3)
print(repr(original_point))  

# Використання рядка, повернутого __repr__, для створення нового об'єкта
new_point = eval(repr(original_point))
print(new_point)

Виведення:

Point(x=2, y=3)
Point(x=2, y=3)

Ми створили об'єкт original_point класу Point та використали __repr__ для отримання його 
представлення repr(original_point). Далі ми можемо використовувати це представлення 
для створення нового об'єкта з такими ж атрибутами. Для цього використовують функцію eval, 
яка і створює новий об'єкт new_point з рядкового представлення.

Функція eval() використовується для виконання рядкового виразу як коду. Вона приймає рядок і 
виконує його як вираз Python, повертаючи результат виконання цього виразу. Коли метод __repr__ 
класу повертає рядок, його можна передати до eval(). Ідея полягає в тому, щоб виклик eval() 
з результатом __repr__ створив новий об'єкт, ідентичний оригіналу.

☝ Важливо пам'ятати про обережне використання eval(), оскільки виконання коду, отриманого з 
ненадійних джерел, може призвести до серйозних проблем з безпекою.

Дуже схожий на метод __repr__, який відповідає за те, як об'єкт конвертується в рядок — 
це метод __str__. Коли ви викликаєте функцію str та передаєте їй якийсь об'єкт, то насправді 
цей об'єкт викликається магічним методом __str__.

Метод __str__ призначений для повернення рядкового представлення об'єкта, яке має бути 
читабельним і зрозумілим для людини. Коли ви викликаєте функцію str() для об'єкта або д
рукуєте об'єкт за допомогою print(), Python автоматично використовує метод __str__ вашого класу. 
Це дає вам, як розробнику, можливість визначити, як об'єкт має бути представлений у зрозумілій формі.

Тому важливо визначити метод __str__ у ваших класах: щоб надати інтуїтивно зрозуміле та зручне 
для читання представлення ваших об'єктів.

class Human:
    def __init__(self, name: str, age: int):
        self.name = name
        self.age = age

    def __str__(self):
        return f"Human named {self.name} who is {self.age} years old"
    
    def __repr__(self):
        return f"Human({self.name}, {self.age})"

human = Human("Alice", 30)
print(human)

Виведення:

Human named Alice who is 30 years old

Наш метод __str__ призначений для повернення рядка, який є зрозумілим для кінцевого користувача. 
Якщо цей метод не визначено, Python використає метод __repr__ як запасний варіант для 
перетворення об'єкта в рядок.

В підсумку магічні методи __str__ та __repr__ є важливими інструментами в арсеналі Python 
розробника. Вони дозволяють не тільки краще контролювати, як об'єкти класу представлені, 
але й поліпшити досвід користувачів та спростити процес налагодження. Вивчення та 
використання цих методів забезпечить повне використання можливостей об'єктно-орієнтованого 
програмування в Python.