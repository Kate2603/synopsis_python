Робота з не текстовими файлами у Python

Поки що ми розглядали тільки роботу з текстовими фалами в кодуванні UTF-8. Це режим роботи 
з файлами за замовчуванням. Якщо ж потрібно працювати не з текстовими файлами, то можна 
казати режим відкриття файлів як b, скорочено від bytes. У такому режимі ви отримаєте 
файловий об'єкт для роботи з файлом в режимі байт-рядків.

✂️ Цей код можна запустити! 

with open('raw_data.bin', 'wb') as fh:
    fh.write(b'Hello world!')

В цьому прикладі ми відкрили файл raw_data.bin у режимі для запису "сирих" даних, на що вказує 
значення wb. В цьому режимі у файл можна писати тільки байт-рядки або байт-масиви.

У режимі роботи з "сирими" даними можна відкрити та прочитати вміст будь-якого файлу. 
Замість терміну “сирі” дані, можуть також казати двійкові дані або бінарні дані.

Отже є ще один контейнер, з яким ми раніше не працювали. Це bytes — байтові рядки.

Байтові рядки в Python є важливим інструментом для роботи з двійковими даними. Вони дозволяють 
зберігати та обробляти байти, які є основними будівельними блоками даних у комп'ютерах.

У пам'яті комп'ютера дані зберігаються як послідовності байтів. Будь-яка інформація - текст, 
зображення, звук, тощо - може бути представлена у вигляді байтів. Відповідно, будь-які дані 
можна представити у вигляді послідовності байтів.

Щоб працювати з послідовністю байтів у Python є вбудовані типи даних байт-рядків

- bytes - незмінний тип, що використовують для представлення байтів.
- bytearray - змінний тип, що дозволяє модифікувати байти після їх створення.

Застосування байтових даних досить поширене. Наприклад байтові рядки важливі для роботи з 
мережевими протоколами (наприклад, TCP/IP), послідовними портами, telnet та іншими протоколами, 
де дані передаються як потік байтів.

За своєю суттю байт-рядки або простіше байти — це звичайні рядки, але для запису одного 
символу використовується суворо один байт. Це відрізняється від звичайних рядків, де 
символи (особливо в Unicode) можуть займати більше одного байта.

Але що таке байт та біт насправді для комп'ютера? Розглянемо це більше детально.

Біт (скорочено від "binary digit" або "двійкова цифра") є основною одиницею інформації в 
обчислювальній техніці та цифровій комунікації. Біт може мати одне з двох значень: 0 або 1. 
Ви можете думати про біт, як про відповідь на просте питання: "так/ні" або "вимкнено/увімкнено".

Байт - це послідовність з 8 бітів, яка є стандартною одиницею вимірювання кількості інформації 
в комп'ютерах. Один байт може представляти 256 різних станів. Від 00000000 до 11111111 у 
двійковому форматі або від 0 до 255 десятеричному, що дозволяє кодувати широкий спектр 
інформації, наприклад, символи тексту, частини зображень або звуку.

У комп'ютерах кожен символ у тексті (наприклад, літера або цифра) зазвичай кодується одним 
байтом. Наприклад, у кодуванні ASCII символ 'A' представляється як 01000001. Усі дані на 
комп'ютері зберігаються у вигляді байтів. Наприклад, текстовий файл розміром у 1 кілобайт 
займає 1024 байти в пам'яті комп'ютера. Коли дані передаються через інтернет мережу, вони 
також розбиваються на байти.

Звісно не всі програмісти працюють напряму з бітами та байтами, але розуміти це потрібно. 
Оскільки біти та байти є фундаментом всіх цифрових систем. Вони дозволяють комп'ютерам 
представляти та обробляти всі види інформації, від простих документів до складних відео та звуків.

Для байт-рядків застосовуються ті самі обмеження і правила, що і для звичайних рядків. 
Наприклад, ви можете використовувати методи upper(), startswith(), index(), find() і так далі.

Індексація працює так само, як і в звичайних рядках:

✂️ Цей код можна запустити! 

s = b'Hello!'
print(s[1])  # Виведе: 101 (це ASCII-код символу 'e')

Але повертає число, в нашому прикладі 101. Це ASCII-код символу 'e'.

ASCII (American Standard Code for Information Interchange - Американський стандартний код 
для обміну інформацією) - це символьна кодова таблиця, яка використовується для представлення 
тексту в комп'ютерах, комунікаційному обладнанні та інших пристроях, що працюють з текстом. 
Кожен символ у таблиці ASCII відповідає певному числу.

ASCII визначає 128 символів, що включають латинські літери, цифри, знаки пунктуації, а також 
символи управління. Кожен символ кодується 7-бітним числом, що дозволяє представити числа 
від 0 до 127. Існує також розширений ASCII, який використовує 8-бітне кодування для 
представлення 256 символів (від 0 до 255). Це розширення включає додаткові символи, 
такі як латинські літери з діакритичними знаками, графічні символи тощо.

Наведемо приклади ASCII-кодів

Цифри: '0' - 48, '1' - 49, ..., '9' - 57.
Великі латинські літери: 'A' - 65, 'B' - 66, ..., 'Z' - 90.
Малі латинські літери: 'a' - 97, 'b' - 98, ..., 'z' - 122.
Спеціальні символи: пробіл - 32, '!' - 33, '@' - 64 тощо.

ASCII широко використовується для зберігання та обробки тексту в комп'ютерах, особливо для 
англомовного контенту. Мережеві протоколи та комунікаційні інтерфейси часто використовують 
ASCII для передачі текстової інформації. Але ASCII не підтримує символи багатьох мов, що 
не використовують латинський алфавіт. Через це були розроблені інші формати кодування, 
такі як UTF-8, які підтримують широкий спектр мовних символів та інших знаків. Про нього 
ми розповімо окремо трохи далі.

ASCII важливий стандарт у ранньому розвитку комп'ютерних технологій, який заклав основу 
для подальшої розробки систем кодування тексту. Хоча зараз він частково замінений більш 
універсальними системами кодування, такими як UTF-8, ASCII все ще має значення у багатьох 
областях обчислювальної техніки.

Створимо наступний байт-рядок:

byte_string = b'Hello world!'

В цьому прикладі у byte_string містить послідовність символів по одному байту на кожного. 
Від оголошення звичайного рядку байт-рядок вирізняє наявність символу b на початку рядка.

Другий спосіб створення байт рядків — це перетворення у байт-рядок.

Для перетворення рядка у байт-рядок можна скористатися методом рядків encode. Коли ви 
використовуєте .encode(), ви перетворюєте рядок у байтову послідовність. Метод .encode() 
важливий, оскільки він дозволяє стандартизувати рядок для операцій, які вимагають 
однакового представлення символів, незалежно від системи або платформи.

✂️ Цей код можна запустити! 

byte_str = 'some text'.encode()
print(byte_str)

У byte_str буде записана послідовність байтів b'some text'.

Синтаксис:

str.encode(encoding="utf-8", errors="strict")

- encoding - вказує метод кодування. По замовчуванню використовується 'utf-8', який підтримує велику 
    кількість символів з різних мов.
- errors - вказує, як обробляти помилки кодування. Наприклад, 'strict' для викидання виключення 
    у випадку помилки, 'ignore' для ігнорування помилок або 'replace' для заміни неможливих для кодування символів на певний замінник (?).

Ви повинні зрозуміти, що метод .encode() є фундаментальним для роботи з текстовими даними 
в Python, оскільки він забезпечує зв'язок (місток) між текстом (рядками Unicode) та байтами, 
які можуть бути використані в бінарних операціях або в передачі даних по мережі.

