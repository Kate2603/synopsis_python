Робота з архівами

Архіви по своїй суті — це ті самі файли, але інформація в них розташована з використанням 
алгоритмів стискання, які дозволяють записати інформацію в меншому об'ємі.

Ви можете відкрити будь-який архів як файл в режимі роботи з байт-рядками, реалізувати 
алгоритм стискання і розпаковування на Python, і отримати власний архіватор/деархіватор. 
Ця досить цікава вправа і ви, звичайно, можете її виконати, якщо хочете глибше розібратися 
в алгоритмах стискання.

Одна з головних причин популярності Python — в наявності великої кількості пакетів та модулів 
зі всіляким функціоналом, які можна використати для своїх потреб. Є простіший спосіб роботи 
з популярними безкоштовними архівами у Python — це пакет shutil, який представляє просунутіший 
файловий менеджер та вміє працювати з архівами.

☝ Модуль shutil в Python - це модуль стандартної бібліотеки, який надає ряд функцій для роботи 
з файлами і колекціями файлів. Цей модуль може бути використаний для копіювання, переміщення, 
перейменування та видалення файлів і директорій, забезпечуючи високорівневі операції для обробки 
файлової системи, які є більш зручними, ніж використання базових функцій модуля os.

Пакет shutil підтримує архіви zip, tar, gz. Для цього він використовує пакети zipfile та tarfile. 
Ви можете використовувати їх напряму, якщо захочете.

Функція shutil.make_archive() в Python використовується для створення архівів (наприклад, ZIP 
або TAR файлів) з заданої директорії. Ця функція є частиною модуля shutil, який надає багато 
зручних операцій для роботи з файлами, включаючи копіювання та архівування.

Синтаксис методу:

shutil.make_archive(base_name, format, root_dir=None, base_dir=None)

Параметри:

- base_name - шлях до файлу, де потрібно зберегти архів, без розширення.
- format - формат архіву, наприклад 'zip', 'tar', 'gztar', 'bztar' або 'xztar'.
- root_dir - директорія, з якої буде створено архів. Якщо не вказано, використовується поточна директорія.
- base_dir - директорія всередині архіву, з якої почнеться архівація.

Створення zip архіву.

import shutil

# Створення ZIP-архіву з вмістом директорії 'my_folder'
shutil.make_archive('example', 'zip', root_dir='my_folder')

Цей код створить zip архів з ім'ям example.zip, що містить усі файли та піддиректорії, що 
знаходяться у директорії my_folder.

Створення gztar архіву.

import shutil

# Створення TAR.GZ архіву
shutil.make_archive('example', 'gztar', root_dir='my_folder')

У цьому випадку створюється TAR-архів з GZIP-стисненням.

Навіщо нам потрібно архівування? Це автоматизація процесу створення резервних копій файлів 
та директорій. Створення архівів з програмним кодом, ресурсами або документацією для подальшого 
розповсюдження. Архівування для зменшення обсягу використовуваного дискового простору або для 
спрощення передачі файлів через мережу.

Звичайно пакет shutil підтримує розпаковування архівів. Функція shutil.unpack_archive() 
використовується для розпакування архівних файлів, таких як ZIP або TAR, до вказаної 
директорії. Це зручний спосіб автоматизувати процес розпакування без необхідності вручну 
використовувати інструменти архівування.

Синтаксис

shutil.unpack_archive(filename, extract_dir=None, format=None)

Параметри

filename - шлях до архівного файлу, який потрібно розпакувати.
extract_dir - директорія, куди буде розпаковано вміст архіву. Якщо не вказано, використовується 
поточна директорія.
format - формат архіву наприклад, zip, tar, gztar, bztar, або xztar. Якщо параметр не вказано, 
Python намагається визначити формат автоматично.

Розпакування zip архіву:

import shutil

# Розпакування ZIP-архіву в певну директорію
shutil.unpack_archive('example.zip', 'destination_folder')

Цей код розпакує вміст example.zip у директорію destination_folder.

Окрім роботи з архівами модуль shutil може ще виконувати наступні високорівневі операції для 
обробки файлової системи:

- shutil.copy(src, dst) копіює файл з src в dst. Якщо dst є директорією, файл буде скопійований 
    зі своїм поточним іменем у цю директорію.
- shutil.copytree(src, dst) рекурсивно копіює всю директорію src в директорію dst.
- shutil.move(src, dst) переміщує файл або директорію src в dst.
- shutil.rmtree(path) рекурсивно видаляє директорію path.
- shutil.disk_usage(path) повертає статистику використання диска, що містить загальний об'єм, 
    використаний об'єм і вільний об'єм для даного шляху.

Наведемо приклад використання shutil для копіювання файлу та директорії:

import shutil

# Копіюємо файл
source_file = '/path/to/source/file.txt'
destination_dir = '/path/to/destination'
shutil.copy(source_file, destination_dir)

# Копіюємо всю директорію
source_dir = '/path/to/source/directory'
destination_dir = '/path/to/destination/directory'
shutil.copytree(source_dir, destination_dir)

Важливо зазначити, що перед використанням функцій, які модифікують файлову систему, слід з 
особливою увагою перевіряти шляхи та параметри, щоб уникнути втрати даних. За це відповідає 
модуль pathlib який ми розглянемо далі.