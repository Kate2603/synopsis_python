Створення Шляхів

Створення шляхів за допомогою класу Path у модулі pathlib у Python є зручним способом 
маніпуляції файловими шляхами, який абстрагує від особливостей конкретної операційної системи.

Клас Path автоматично адаптується до особливостей шляхів у різних операційних системах. 
Наприклад, у Windows використовуються зворотні слеші (\), тоді як в Unix-подібних системах 
(Linux, macOS) - прямі слеші (/).

Сам приклад процесу створення шляху наступний:

from pathlib import Path

# Для Unix/Linux
path_unix = Path("/usr/bin/python3")

# Для Windows
path_windows = Path("C:/Users/Username/Documents/file.txt")

Об'єднання шляхів у pathlib - це процес, за допомогою якого можна створювати повні шляхи до 
файлів або директорій шляхом додавання різних частин шляху разом.

Для об'єднання шляхів використовується оператор /. Це інтуїтивний спосіб створення шляху, 
який абстрагується від різниці в синтаксисі шляхів між різними операційними системами.

Розглянемо приклад:

✂️ Цей код можна запустити! 

from pathlib import Path

# Початковий шлях
base_path = Path("/usr/bin")

# Додавання додаткових частин до шляху
full_path = base_path / "subdir" / "script.py"

print(full_path)  # Виведе: /usr/bin/subdir/script.py

У цьому прикладі, до початкового шляху base_path додаються додаткові частини - директорія 
"subdir" та файл "script.py". Оператор / дозволяє це зробити чисто та зрозуміло і ми 
отримуємо шлях до файлу:

\usr\bin\subdir\script.py

Відносні та абсолютні шляхи

При роботі з файлами та директоріями у Python важливо розуміти відмінності між відносними 
та абсолютними шляхами. Модуль pathlib надає інструменти для роботи з обома типами шляхів.

Абсолютний шлях - це повний шлях до файлу або директорії від кореня файлової системи. 
Він містить всю інформацію, необхідну для знаходження файлу або директорії.

Приклад на Unix/Linux: /home/user/documents/example.txt
Приклад на Windows: C:\Users\user\documents\example.txt

Абсолютні шляхи використовують, коли потрібно точно вказати місцезнаходження файлу або 
директорії, незалежно від поточного робочого каталогу програми.

Відносний шлях - це шлях до файлу або директорії відносно поточного робочого каталогу. 
Він не містить повну інформацію про місцезнаходження і залежить від місця, з якого виконується програма.

Припустимо, ви працюєте на комп'ютері з Windows, і ваш поточний робочий каталог (там, де ви 
виконуєте ваш Python скрипт) - наприклад це C:\Users\Username. Ваша задача - працювати з 
файлом example.txt, який знаходиться у підкаталозі Documents вашого домашнього каталогу.

Абсолютний шлях в Windows включає літеру диска і вказує повний шлях до файлу від кореня диска. 
Наприклад, абсолютний шлях до нашого файлу може виглядати як C:\Users\Username\Documents\example.txt.

Відносний шлях визначається відносно поточного робочого каталогу. Якщо ваш поточний робочий 
каталог - C:\Users\Username, то відносний шлях до файлу example.txt у директорії Documents 
буде просто Documents\example.txt.

З pathlib, ви можете легко перетворювати шляхи між абсолютними та відносними форматами.

✂️ Цей код можна запустити! 

from pathlib import Path

# Перетворення відносного шляху в абсолютний
relative_path = Path("documents/example.txt")
absolute_path = relative_path.absolute()
print(absolute_path)

Розглянемо приклад, який було запущено в директорії (поточний робочий каталог) автора курсу. 
Зазначимо, що у вас директорія може бути інша:

E:\WebDir\Works\Python\python-help-solution\example_for_new_core\l04

Тоді, при виконанні прикладу ми повинні отримати наступне виведення:

E:\WebDir\Works\Python\python-help-solution\example_for_new_core\l04\documents\example.txt

У цьому прикладі, Path("documents/example.txt") створює відносний шлях. Метод absolute() 
перетворює його в абсолютний шлях, виходячи з поточного робочого каталогу.

Існує метод relative_to() який навпаки, використовується для отримання відносного шляху 
відносно заданої директорії.

✂️ Цей код можна запустити! 

from pathlib import Path

# Перетворення відносного шляху в абсолютний
relative_path = Path("documents/example.txt")
absolute_path = relative_path.absolute()

current_working_directory = Path("E:\WebDir\Works\Python\python-help-solution\example_for_new_core\l04")
relative_path = absolute_path.relative_to(current_working_directory)
print(relative_path)

Розуміння та використання абсолютних та відносних шляхів важливе при написанні програм, 
які читають, записують або маніпулюють файлами та директоріями.

Маніпуляція з компонентами шляху

Клас Path надає зручні методи для маніпулювання компонентами шляху, такі як with_name і 
with_suffix. Ці методи дозволяють легко змінювати ім'я файлу або його розширення в об'єкті Path.

Метод with_name замінює ім'я файлу в шляху на нове. Він корисний, коли вам потрібно змінити 
тільки ім'я файлу, зберігаючи решту шляху незмінною.

✂️ Цей код можна запустити! 

from pathlib import Path

# Початковий шлях до файлу
original_path = Path("documents/example.txt")

# Зміна імені файлу
new_path = original_path.with_name("report.txt")
print(new_path)

У цьому прикладі, with_name("report.txt") замінює ім'я файлу example.txt на report.txt, 
при цьому зберігаючи решту шляху documents без змін.

documents\report.txt

Метод with_suffix замінює або додає розширення файлу в шляху. Це корисно, коли потрібно 
змінити тип файлу або додати розширення до файлу, який його не має.

✂️ Цей код можна запустити! 

from pathlib import Path

# Початковий шлях до файлу
original_path = Path("documents/example.txt")

# Зміна імені файлу
new_path = original_path.with_suffix(".md")
print(new_path)

У цьому прикладі, метод with_suffix(".md") додає розширення .md до шляху.

documents\example.md

Але треба розуміти, що методи with_name і with_suffix в класі Path модуля pathlib в Python не 
змінюють фізичне ім'я файлу на диску. Замість цього, вони використовуються для створення 
нового об'єкта Path, який відображає змінений шлях.

✂️ Цей код можна запустити! 

from pathlib import Path

original_path = Path("documents/example.txt")

# Створює новий об'єкт Path з іншим ім'ям файлу
new_path = original_path.with_name("report.txt")

print(original_path)
print(new_path)

У цьому прикладі, original_path залишається незмінним, а new_path є новим об'єктом Path, 
який відображає шлях з новим іменем файлу.

documents\example.txt
documents\report.txt

Щоб фізично змінити ім'я файлу на диску, потрібно використовувати методи для роботи з 
файловою системою, наприклад, rename. Цей виклик змінить ім'я файлу example.txt на 
report.txt у директорії documents на диску.

✂️ Цей код можна запустити! 

from pathlib import Path

original_path = Path("documents/example.txt")

# Створює новий об'єкт Path з іншим ім'ям файлу
new_path = original_path.with_name("report.txt")
original_path.rename(new_path)

