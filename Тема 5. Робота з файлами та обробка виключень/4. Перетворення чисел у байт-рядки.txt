Перетворення чисел у байт-рядки

У Python ви можете перетворювати числа у байт-рядки за допомогою вбудованої функції bytes. 
Це корисно для роботи з двійковими даними, особливо коли потрібно зберігати або передавати 
числові значення у форматі, оптимізованому для обробки на низькому рівні.

В один байт поміщається число від 0 до 255 включно, відповідно можна перетворити послідовність 
чисел від 0 до 255 у байт-рядок за допомогою функції bytes:

✂️ Цей код можна запустити! 

# Перетворення списку чисел у байт-рядок
numbers = [0, 128, 255]
byte_numbers = bytes(numbers)
print(byte_numbers)  # Виведе байтове представлення чисел

В цьому прикладі, числа від 0 до 255 перетворюються на відповідні байти. Оскільки кожне 
число у діапазоні від 0 до 255 займає рівно один байт, вони безпосередньо перетворюються 
в байтовий рядок. Для виведення байтів найзручніше скористатися шістнадцятковим записом, 
в якому для запису чисел від 0 до 255 достатньо двох символів. Саме такий запис 
використовує Python "за замовчуванням" для байтів.

Виведення:

b'\x00\x80\xff'

Тут використовується шістнадцятковий формат для зручного відображення байтів. Символ \x є 
індикатором шістнадцяткового запису кожного байта.

Щоб перевірити правильність представлення, можна скористатися вбудованою функцією hex, 
яка перетворить ціле число в рядок — представлення числа в шістнадцятковій формі:

✂️ Цей код можна запустити! 

for num in [127, 255, 156]:
  print(hex(num))

Цей код демонструє, як перетворити числа у їх шістнадцяткові рядкові представлення, 
починаючи з 0x, що вказує на шістнадцяткову форму запису. В результаті виконання ви побачите:

0x7f
0xff
0x9c

В такому вигляді перші два символи 0x вказують на шістнадцяткову форму запису.

Такий механізм корисний у різноманітних сценаріях, включаючи низькорівневе програмування, 
роботу з мережевими протоколами та обробку бінарних файлів. Він дозволяє працювати з байтами 
більш інтуїтивно, надаючи змогу легко перевірити та візуалізувати бінарні дані.

