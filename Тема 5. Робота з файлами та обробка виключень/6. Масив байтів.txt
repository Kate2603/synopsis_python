Масив байтів

Робота з рядками обмежена тим, що рядки і байт-рядки незмінні. Якщо потрібно замінити навіть один символ, потрібно, по суті, створити копію початкового рядка з єдиним відмінним символом. Щоб зменшити накладні витрати при роботі з "сирими" даними, в Python є такий контейнер як bytearray.



✂️ Цей код можна запустити! 

byte_array = bytearray(b'Kill Bill')
byte_array[0] = ord('B')
byte_array[5] = ord('K')
print(byte_array)



Виведення:

bytearray(b'Bill Kill')



Основна відмінність від байт-рядків — це змінність, щоб змінити масив байтів, не потрібно створювати новий. Друга важлива відмінність — це те, що масив байтів сприймається системою як послідовність чисел від 0 до 255, а не як послідовність символів в ASCII кодуванні. Саме тому не можна написати byte_array[0] = b'B'. Елементи масиву байтів сприймаються саме як цілі числа.



В іншому ж bytearray може використовуватися як заміна байт-рядків і у нього є ті самі методи з тією самою поведінкою.



Окрім зміни існуючих елементів, bytearray дозволяє додавати та видаляти елементи, що робить його набагато більш гнучким у порівнянні з незмінними байт-рядками.



✂️ Цей код можна запустити! 

byte_array = bytearray(b"Hello")
byte_array.append(ord("!"))  
print(byte_array)



Виведення:

bytearray(b'Hello!')



Хоча bytearray сприймається як послідовність чисел, його можна легко перетворити в рядок за допомогою методу decode(), вказавши потрібне кодування.



✂️ Цей код можна запустити! 

byte_array = bytearray(b"Hello World")
string = byte_array.decode("utf-8")
print(string)  # Виведе: 'Hello World'



Виведення:

Hello World



bytearray особливо корисний при обробці бінарних даних, наприклад, при читанні файлів у бінарному режимі, обробці мережевих пакетів, або при роботі з образами даних у пам'яті.

