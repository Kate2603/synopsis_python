Службова змінна __name__

Важливо розуміти, що під час імпорту модуля Python виконує увесь код, що міститься в модулі. Змінимо вміст модуля mymodule.py на такий:



✂️ Цей код можна запустити! 

def say_hello(name):
    print(f'Hello, {name}')

print("You imported hello.py")
say_hello('user')



Тоді під час виконання коду:



✂️ Цей код можна запустити! 

# main.py
from mymodule import say_hello as greeting

print(greeting("World"))



Ми побачимо наступне виведення:



You imported hello.py
Hello user
Hello, World!



Чому? Під час імпорту from hello import say_hello, ми виконали автоматично сам скрипт mymodule.py який і виведе у консоль:



You imported hello.py
Hello user



Далеко не завжди така поведінка бажана.



Що ж робити, коли ми хочемо зробити скрипт, що виконується (який можна викликати із консолі командою python [ім'я скрипта]), але зберегти можливість імпорту з цього модуля, не викликаючи його?



В таких випадках нам може допомогти службова змінна Python: __name__. Річ у тому, що якщо скрипт викликаний безпосередньо, то він є "точкою входу" та __name__ == "__main__". Якщо ж цей модуль виконується під час імпорту, то __name__ == "mymodule" для модуля, який називається mymodule.py. Таким чином ми можемо модифікувати наш модуль mymodule.py:



✂️ Цей код можна запустити! 

def say_hello(name):
    print(f'Hello, {name}')

if __name__ == '__main__':
    print("You imported hello.py")
    say_hello('user')



Тоді під час імпорту функції say_hello із mymodule.py код у блоці if ... не буде виконаний, а якщо ж в консолі виконати python mymodule.py, то буде.



Для зручності прийнято весь код, який потрібно виконати, коли модуль викликається із консолі (не імпортується), поміщати у функцію main:



✂️ Цей код можна запустити! 

def say_hello(name):
    print(f'Hello {name}')

def main():
    print("You imported hello.py")
    say_hello('user')

if __name__ == '__main__':
    main()



Так заведено і функцію main ще називають "точкою входу", оскільки робота застосунку починається з виклику цієї функції. Ви, звичайно, можете назвати цю функцію як завгодно, але називати її саме main вважається хорошим тоном. Далі ми обговоримо ще структуру проєкту на Python.