Створення віртуального оточення



Встановлювати пакети Python в систему глобально — не найкраща ідея, оскільки встановлені пакети захаращують систему і можуть конфліктувати. Конфлікти встановлених пакетів — це одна з проблем, що найважче виправляються, при роботі з Python. "Поламані" залежності можуть забрати багато часу навіть у дуже досвідченого розробника. Тим паче складніше впоратися з цим новачкам.



Щоб уникнути проблем із залежностями, і встановлення потрібних для якогось проєкту пакетів не впливала на всю вашу операційну систему та інші проєкти, рекомендується використати віртуальне оточення Python.



☝ Створення віртуального оточення в Python є важливим кроком для розробки проєктів, оскільки це дозволяє ізолювати залежності для кожного проєкту. Це означає, що можна мати різні версії бібліотек для різних проєктів і таким чином уникнути конфліктів залежностей.


Оскільки пакет у Python — це директорії з файлами-модулями, ми можемо створити окрему директорію для пакетів-залежностей всередині кожного проєкту. Якщо вказати Python, що працюючи в директорії проєкту, імпортувати пакети потрібно саме з цієї директорії, то тоді ми зможемо ізолювати в операційній системі наші проєкти один від одного. Така директорія з пакетами-залежностями — це і є віртуальне оточення.



☝ Віртуальне оточення - це ізольоване середовище для Python проєктів. Використовуючи віртуальне оточення, можна встановлювати бібліотеки та їхні залежності в межах цього середовища, не впливаючи на глобальне середовище Python або на інші віртуальні оточення.


Існує багато інструментів, які автоматизують для нас створення/видалення/активування віртуального оточення. Найпростіший і найстандартніший інструмент — це venv.



Почитати, що вміє venv, можна на сторінці офіційної документації. Так само як і pip, venv — це вбудований в Python консольний скрипт.



Щоб створити нове віртуальне оточення, виконайте наступні кроки:



Відкрийте термінал або командний рядок.
Перейдіть до директорії, де ви хочете створити свій Python проєкт.
Виконайте наступну команду для створення віртуального оточення:


python -m venv .venv 



Це створить директорію .venv у поточній директорії, яка міститиме віртуальне оточення.



Після виконання цієї команди у директорію .venv буде скопійований Python з мінімальним набором стандартних пакетів. І ви зможете використати цей Python окремо від основного системного або будь-якого іншого.



Щоб почати використовувати Python з віртуального оточення, виконайте активацію віртуального оточення. Для активації віртуального оточення, використовуйте одну з наступних команд, в залежності від вашої системи та командного інтерпретатора:



На Windows у командному рядку (CMD):



.\.venv\Scripts\activate.bat



На Windows у PowerShell:



.\.venv\Scripts\Activate.ps1



На macOS та Linux:



source .venv/bin/activate



Після активації командний рядок зміниться, відображаючи назву віртуального оточення, це показує, що воно активне.



Наприклад для PowerShell під Windows виконання команди:



PS E:\example_joke> .\.venv\Scripts\Activate.ps1



Активує віртуальне середовище та консоль змінить вид на наступний:



(.venv) PS E:\example_joke>



Як бачимо, нам підказують (.venv), що зараз ми опинилися в віртуальному середовищі яке знаходиться в директорії .venv. Тепер після активації в цій консолі виклик python буде викликати не системний Python, а версію з директорії .venv зі своїми пакетами.



Активувавши віртуальне оточення, ви можете встановлювати/видаляти пакети за допомогою pip у віртуальному оточенні. Встановлення/видалення пакетів впливає тільки на віртуальне оточення і не зачіпає систему або інші проєкти.



Щоб встановити необхідні бібліотеки в межах цього віртуального оточення, використовуйте pip install:



pip install package_name



Ці встановлені бібліотеки будуть ізольовані від глобального середовища Python.



Щоб повернутися до системного Python, виконайте в консолі:



 deactivate



Це поверне вас до глобального середовища Python.



Щоб видалити віртуальне оточення, достатньо фізично видалити директорію .venv з усім її вмістом в директорії проєкту.



Використання venv є стандартною практикою для створення ізольованих середовищ для Python проєктів, що дозволяє уникнути конфліктів між залежностями різних проєктів. Це забезпечує чистоту вашого робочого середовища і спрощує управління бібліотеками та залежностями.





Практичний приклад

Розглянемо практичний приклад та закріпимо матеріал. Створимо проєкт в корні диску та створимо там віртуальне оточення.



✂️ Цей код можна запустити! 

PS F:\example_prj> python -m venv .venv



Активуємо віртуальне оточення:



✂️ Цей код можна запустити! 

PS F:\example_prj> .\.venv\Scripts\Activate.ps1



Введемо наступну команду для встановлення стороннього пакета colorama:



✂️ Цей код можна запустити! 

(.venv) PS F:\example_prj> pip install colorama



У вас повинно бути схоже виведення при установці пакету.



Collecting colorama
  Using cached colorama-0.4.6-py2.py3-none-any.whl (25 kB)
Installing collected packages: colorama
Successfully installed colorama-0.4.6



Colorama - це популярна бібліотека Python, яка використовується для додавання кольорів до тексту в консолі. Цей пакет дуже корисний для розробників, які хочуть покращити візуальний вигляд своїх консольних програм, зробити логи більш читабельними або просто додати трохи кольору для візуального відокремлення різних частин виведення.



Для того, щоб показати приклад використання, помістимо наступний код в файл test.py:



✂️ Цей код можна запустити! 

from colorama import Fore, Back, Style

print(Fore.RED + 'Це червоний текст')
print(Back.GREEN + 'Це текст на зеленому фоні')
print(Style.RESET_ALL)
print('Це звичайний текст після скидання стилю')



У цьому прикладі, Fore та Back використовуються для вказівки кольору тексту та фону відповідно, а Style.RESET_ALL використовується для скидання стилю до стандартного. Саме виконання коду має виглядати так:






Тепер створимо файл log.py з функціями логування:



✂️ Цей код можна запустити! 

from colorama import Fore

def log_info(message):
    print(f"{Fore.BLUE} [INFO] {Fore.RESET} {message}")

def log_warning(message):
    print(f"{Fore.YELLOW} [WARNING] {Fore.RESET} {message}")

def log_error(message):
    print(f"{Fore.RED} [ERROR] {Fore.RESET} {message}")



Цей модуль буде відповідати за логування повідомлень.



Логування інформаційних повідомлень log_info
Логування попереджень log_warning
Логування помилок log_error


Тепер створіть основний скрипт main.py, де ми використаємо log.py:



✂️ Цей код можна запустити! 

import math
from log import log_info, log_warning, log_error

def calculate_square_root(numbers: list) -> None:
    for number in numbers:
        try:
            if number < 0:
                # Логування попередження для від'ємних чисел
                log_warning(f"Знайдено від'ємне число: {number}. Пропускаємо.")
                continue

            root = math.sqrt(number)
            log_info(f"Квадратний корінь з {number} - {root:.2f}")

        except Exception as e:
            # Логування помилки у випадку інших винятків
            log_error(f"Помилка при обчисленні кореня для {number}: {e}")

if __name__ == "__main__":
    # Припустимо, у нас є список чисел
    numbers = [16, -4, 9, 25, 0, 4, "16"]
    calculate_square_root(numbers)



Цей код обчислює квадратні корені зі списку numbers і має виведення:






Як бачимо ми використовуємо функцію log_info для відображення результату обчислення квадратного кореня числа. Якщо зустрічається від'ємне число, програма виводить попереджувальне повідомлення, за допомогою log_warning, та пропускає обчислення. У випадку виникнення будь-яких виняткових ситуацій, програма виводить повідомлення про помилку за допомоги log_error. У нас це відбувається коли ми намагаємось взяти квадрат від рядка "16".



Отже ми створили віртуальне оточення і пакет colorama знаходиться в директорії .venv. Перевіримо це, та виконаємо деактивацію віртуального оточення



(.venv) PS F:\example_prj> deactivate



Та спробуємо запустити наш скрипт знову:



✂️ Цей код можна запустити! 

PS F:\example_prj> python .\main.py      
Traceback (most recent call last):
  File "F:\example_prj\main.py", line 2, in <module>
    from log import log_info, log_warning, log_error
  File "F:\example_prj\log.py", line 1, in <module>
    from colorama import Fore, Style
ModuleNotFoundError: No module named 'colorama'



Як бачимо код не виконується, бо ми вийшли з віртуального середовища. Повернемось назад в віртуальне середовище виконав .\.venv\Scripts\Activate.ps1.



☝ До речі код може виконатися і без віртуального середовища, якщо пакет colorama був встановлений глобально на комп'ютері. Тоді звісно помилки не буде бо системний Python знає про цей пакет.


В нас є проблема, як зрозуміти які пакети встановлені в нашому віртуальному середовищі? Для цього існує файл requirements.txt який використовується для визначення залежностей проєкту, тобто переліку пакетів, необхідних для його коректної роботи. Цей файл дозволяє легко управляти залежностями проєкту, особливо коли вам потрібно поділитися проєктом з іншими розробниками або розгорнути його в іншому середовищі.



Ви можете автоматично згенерувати requirements.txt за допомогою pip. Для цього просто запустіть наступну команду у вашому віртуальному середовищі:



pip freeze > requirements.txt



Ця команда створить файл requirements.txt зі списком усіх встановлених пакетів у вашому віртуальному середовищі та їхніх версій.



В нашому випадку requirements.txt повинен вийти з наступним вмістом:



colorama==0.4.6



Коли ви ділитеся своїм проєктом з іншими розробниками або розгортаєте його на іншому сервері чи у віртуальному середовищі, requirements.txt забезпечує, що всі необхідні пакети будуть встановлені для коректної роботи вашого проєкту.



Щоб встановити пакети, перелічені у requirements.txt, використовуйте команду:



pip install -r requirements.txt



На цей момент структура нашого прикладу повинна виглядати так:



📦example_prj
 ┣ 📂.venv
 ┃ ┣ 📂Include
 ┃ ┣ 📂Lib
 ┃ ┣ 📂Scripts
 ┃ ┗ 📜pyvenv.cfg
 ┣ 📜log.py
 ┣ 📜main.py
 ┣ 📜requirements.txt
 ┗ 📜test.py



Повторіть цей практичний приклад крок за кроком на своїй машині та отримайте ті ж самі результати.



☝ Файл requirements.txt є важливою частиною управління залежностями в Python проєктах, допомагаючи забезпечити послідовність та сумісність середовища розробки.