3. Умовні оператори, цикли
1. Який оператор у Python використовується для умовного виконання коду?

--while
--for
!-if ... elif ... else
--try ... except

Вірно! Оператор if ... elif ... else у Python використовується для умовного виконання коду.

2. Як працюють вкладені умовні оператори в Python?

--Вони виконуються паралельно
!-Вони виконуються поетапно
--Вони виконуються тільки при помилці
--Вони не підтримуються в Python

Вірно! Вкладені умовні оператори в Python виконуються поетапно, один за іншим.

3. Як у Python використовується тернарний оператор?

--Для циклічного виконання коду
--Для виконання коду тільки при помилці
--Для порівняння двох змінних
!-Для умовного виконання коду з двома можливими результатами

Тернарний оператор в Python не використовується для циклічного виконання коду або тільки при помилці.

4. Який тип циклу в Python використовується для повторення блоку коду декілька разів?

!-for
--while
--do-while
--match

Цикл while використовується для повторення доки виконується умова, але цикл for - 
для повторення декілька разів.

5. Як у Python використовуються цикли разом зі словниками?

--Для зміни значень словників
--Для видалення елементів із словників
!-Для перебору ключів та значень
--Цикли не можуть використовуватися зі словниками

Вірно! Цикли у Python можуть використовуватися для перебору ключів, значень або обох у словниках.

6. Як у Python працює блок обробки винятків?

--Виконується тільки після закінчення циклу
!-Виконується тільки якщо виникає певний виняток
--Виконується завжди, незалежно від винятків
--Не використовується для обробки помилок

Вірно! У Python блок обробки винятків except виконується тільки в тому випадку, 
якщо виникає вказаний виняток.

#######################################################################

4. Функції, область видимості змінних (LEGB):
1. Для чого використовуються функції у Python?

--Для зміни значень змінних
!-Для групування та повторного виклику коду
--Тільки для математичних обчислень
--Для створення нових типів даних

Вірно! Функції у Python використовуються для групування коду, що виконує певну задачу, 
для його подальшого повторного виклику.

2. Як створюється та викликається функція у Python?

--Використовуючи ключове слово function
--Через пряме присвоєння коду змінній
!-Використовуючи ключове слово def та дужки ()
--Через автоматичний імпорт з іншого файлу

Вірно! Функція у Python створюється за допомогою ключового слова def, за яким слідує 
ім'я функції та пара дужок ().

3. Що таке параметри у функції Python?

--Значення, що передаються функції під час її виклику
!-Перемінні, які використовуються всередині функції
--Цикли, які використовуються у функції
--Зовнішні бібліотеки, що імпортуються в функцію

Параметри функції в Python - це не значення, передані під час виклику, а оголошені 
змінні, які приймають ці значення.

4. Що таке типізація ("type hints") у Python?

--Коментарі для опису коду
!-Підказки для типізації параметрів функції
--Вказівки для імпорту бібліотек
--Помилки виконання

Вірно! "Type hints" в Python використовуються для вказівки очікуваних типів параметрів у функціях.

5. Що таке LEGB у Python?

--Логічна структура програми
--Послідовність виконання коду
!-Правило областей видимості змінних
--Вбудовані функції Python

Вірно! LEGB в Python - це правило, що визначає області видимості змінних: Local, 
Enclosing, Global, Built-in.

6. Що таке ключові аргументи у Python?

--Аргументи, що вказуються за їх порядковим номером
--Аргументи, які використовуються для циклів
!-Аргументи, які обов'язково потрібно вказувати
--Аргументи, що вказуються за їх ім'ям

Вірно! Ключові аргументи у Python - це аргументи, що передаються у функцію за їх ім'ям, 
дозволяючи вказувати їх у будь-якому порядку.

7. Як працює змінна кількість параметрів у Python?

--Дозволяє викликати функцію без параметрів
--Вимагає вказувати всі параметри при кожному виклику
!-Дозволяє функції приймати будь-яку кількість аргументів
--Обмежує кількість параметрів, які може приймати функція

Вірно! Змінна кількість параметрів у Python дозволяє функції приймати нефіксовану кількість аргументів.

8. Що таке рекурсія у Python?

!-Виклик функції самою собою в рамках її виконання
--Використання випадкових значень у функції
--Повторення коду до досягнення певної умови
--Передача даних між різними функціями

Вірно! Рекурсія у Python - це коли функція викликає саму себе в рамках свого виконання, 
що дозволяє розбивати проблему на менші частини
